
################################################################################################################
###                                                                                                          ###
###  This file is automatically generated                                                                    ###
###                                                                                                          ###
################################################################################################################


<#
.Dev
    Author         : Emad Adel @emadadel4
    GitHub         : https://github.com/emadadel4
    Website        : https://eprojects.orgfree.com/
    Version        : 24.04.19
#>

if (!(Test-Path -Path $ENV:TEMP)) {
    New-Item -ItemType Directory -Force -Path $ENV:TEMP
}

# Load DLLs
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName PresentationCore
Add-Type -AssemblyName PresentationFramework.Aero


# Variable to sync between runspaces
$sync = [Hashtable]::Synchronized(@{})
$sync.PSScriptRoot = $PSScriptRoot
$sync.version = "24.04.19"
$sync.github = "https://github.com/emadadel4"
$sync.website = "https://eprojects.orgfree.com"
$sync.author = "Emad Adel @emadadel4"
$registryPath = "HKCU:\Software\ITTEmadadel"
$propertyName = "Theme"
$propertyValue = "Light"
$sync.configs = @{}
$sync.ProcessRunning = $false

$currentPid = [System.Security.Principal.WindowsIdentity]::GetCurrent()
$principal = new-object System.Security.Principal.WindowsPrincipal($currentPid)
$adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator



if ($principal.IsInRole($adminRole))
{
    $Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + "(Admin)"
    clear-host
}
else
{
    $newProcess = new-object System.Diagnostics.ProcessStartInfo "PowerShell";
    $newProcess.Arguments = $myInvocation.MyCommand.Definition;
    $newProcess.Verb = "runas";
    [System.Diagnostics.Process]::Start($newProcess);
    break
}

# Check if the registry path exists
if (!(Test-Path $registryPath)) {
    # If it doesn't exist, create it
    New-Item -Path $registryPath -Force *> $null
}else{
    $global:themePreference = Get-ItemPropertyValue -Path "HKCU:\Software\ITTEmadadel" -Name "Theme"
}
#===========================================================================
# Start functions
#===========================================================================
function About{

    $authorInfo = @"
        Author   : $($sync.author)
        GitHub   : $($sync.github)
        Website  : $($sync.website)
        Version  : $($sync.version)
"@

    Show-CustomDialog -Message $authorInfo -Width 400 
}
function Test-InternetConnection {
    try {
        $ping = New-Object System.Net.NetworkInformation.Ping
        $response = $ping.Send("www.google.com")
        if ($response.Status -eq "Success") {
            return $true
        } else {
            return $false
        }
    } catch {
        return $false
    }
}

function FilterApplicationsByCategory {
    <#
    .DESCRIPTION
    This function filters and populates a list of applications based on the specified category.

    .PARAMETER cat
    The category based on which the applications are filtered.
    #>
    param (
        [string]$Category
    )

    $window.FindName('apps').IsSelected = $true 

    $sync.list.Items.Clear()

    foreach ($item in $sync.configs.applications) {
        if($item.category -eq $Category) {
            $checkbox = New-Object System.Windows.Controls.CheckBox
            $sync.list.Items.Add($checkbox) | Out-Null
            $checkbox.Content = $item.name
        }
    }
}

function ShowAllApplications {
    <#
    .DESCRIPTION
    This function populates the list with all available applications.
    #>

    $window.FindName('apps').IsSelected = $true 

    $sync.list.Items.Clear()

    foreach ($item in $sync.configs.applications) {
        $checkbox = New-Object System.Windows.Controls.CheckBox
        $sync.list.Items.Add($checkbox) | Out-Null
        $checkbox.Content = $item.name
    }
}

function ShowRecommendedApplications {
    <#
    .DESCRIPTION
    This function populates the list with recommended applications.
    #>

    $window.FindName('apps').IsSelected = $true 

    $sync.list.Items.Clear()

    foreach ($item in $sync.configs.applications) {
        if($item.check -eq 'true') {
            $checkbox = New-Object System.Windows.Controls.CheckBox
            $sync.list.Items.Add($checkbox) | Out-Null
            $checkbox.Content = $item.name
        }
    }
}

function CheckChoco 
{

    try {

    if((Get-Command -Name choco -ErrorAction Ignore))
    {
 
        echo "  ___ _____ _____   _____ __  __    _    ____       _    ____  _____ _    _  _   ";
        echo " |_ _|_   _|_   _| | ____|  \/  |  / \  |  _ \     / \  |  _ \| ____| |  | || |  ";
        echo "  | |  | |   | |   |  _| | |\/| | / _ \ | | | |   / _ \ | | | |  _| | |  | || |_ ";
        echo "  | |  | |   | |   | |___| |  | |/ ___ \| |_| |  / ___ \| |_| | |___| |__|__   _|";
        echo " |___| |_|   |_|   |_____|_|  |_/_/   \_\____/  /_/   \_\____/|_____|_____| |_|  ";
        echo "                                                                                 ";
        
        echo "This is Emad adel an Binary ";
        echo "01000101 01001101 01000001 01000100  01000001 01000100 01000101 01001100      ";
        echo "Chocolatey is installed You Good to go  ";
                               
        return
        }

        Write-Host "Chocolatey is not installed, installing now"
        Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) -ErrorAction Stop
        powershell choco feature enable -n allowGlobalConfirmation
    }
    Catch {
        Write-Host "--Chocolatey failed to install---"
    }
}




function Get-SelectedApps {

    $items = @()

    foreach ($item in $sync.list.Items)
    {
        if ($item.IsChecked)
        {
            foreach ($program in $sync.configs.applications)
            {

                if($item.Content -eq $program.name)
                {
                    $items += $program.choco
                }
            }
        }
    }

    return $items 
}

function Get-SelectedTweeaks {

    $items = @()

    foreach ($item in $sync.tweaks.Items)
    {
        if ($item.IsChecked)
        {
            foreach ($tweeak in $sync.configs.tweaks)
            {

                if($item.Content -eq $tweeak.name)
                {
                    $items += $tweeak.script
                }
            }
        }
    }

    return $items 
}

function Invoke-Install() {

    # Check internet connection
    if (Test-InternetConnection) {
        Write-Host "Internet is available you good"
    } else {
        [System.Windows.MessageBox]::Show("Internet is not available.", "ITT", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    if($sync.ProcessRunning)
    {
        $msg = "An Install process is currently running."
        [System.Windows.MessageBox]::Show($msg, "ITT", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
  
    $choco += Get-SelectedApps

    if(Get-SelectedApps -ne $null)
    {
        Invoke-RunspaceWithScriptBlock -ArgumentList  $choco -ScriptBlock {

            param($choco)
            
            try{

                $msg = [System.Windows.MessageBox]::Show("Do you want to Install selected programs?", "ITT @emadadel", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Question)

                if($msg -eq "Yes")
                {
                    $sync.ProcessRunning = $true

                    Write-Host "Installing the following programs $choco "
                    Start-Process -FilePath "choco" -ArgumentList "install $choco -y --force --ignore-checksums" -NoNewWindow -Wait
                    Write-Host "Installs have finished"
                    [System.Windows.MessageBox]::Show("Installs have finished", "ITT @emadadel4", "OK", "Information")

                    # Uncheck all checkboxes in $list
                    $sync.list.Dispatcher.Invoke([Action]{
                        foreach ($item in $sync.list.Items)
                        {
                            $item.IsChecked = $false
                        }
                    })
                   
                }
            }
            Catch
            {
                Write-Host "Error: $_"
            }

            Start-Sleep -Seconds 1
            $sync.ProcessRunning = $False
        }
    }
    else
    {
        [System.Windows.MessageBox]::Show("Select at lest one program", "ITT @emadadel", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Question)
    }
}


function ApplyTweaks() {


    # Check internet connection
    if (Test-InternetConnection) {
        Write-Host "Internet is available you good"
    } else {
        [System.Windows.MessageBox]::Show("Internet is not available.", "ITT", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    if($sync.ProcessRunning)
    {
        $msg = "An Install process is currently running."
        [System.Windows.MessageBox]::Show($msg, "ITT", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
  
    $tweeaks += Get-SelectedTweeaks

    if(Get-SelectedTweeaks -ne $null)
    {
        Invoke-RunspaceWithScriptBlock -ArgumentList  $tweeaks -ScriptBlock {

            param($tweeaks)
            
            try{

                $msg = [System.Windows.MessageBox]::Show("Do you want to apply selected tweeak(s) ?", "ITT @emadadel", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Question)

                if($msg -eq "Yes")
                {
                    $sync.ProcessRunning = $true
                    #Write-Host "Applying tweeak(s) $tweeaks "
                    Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"$tweeaks`"" -NoNewWindow -Wait
                    Write-Host "The operation was successful."    
                    [System.Windows.MessageBox]::Show("The operation was successful.", "ITT @emadadel4", "OK", "Information")

                    $sync.tweaks.Dispatcher.Invoke([Action]{
                        foreach ($item in $sync.tweaks.Items)
                        {
                            $item.IsChecked = $false
                        }
                    })
                }
            }
            Catch
            {
                Write-Host "Error: $_"
            }

            Start-Sleep -Seconds 1
            $sync.ProcessRunning = $False
        }
    }
    else
    {
        [System.Windows.MessageBox]::Show("Choose at least something from the list", "ITT @emadadel", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Question)
    }
}
function Invoke-RunspaceWithScriptBlock {
    param(
        [scriptblock]$ScriptBlock,
        [array]$ArgumentList
    )

        $script:powershell = [powershell]::Create()

        # Add Scriptblock and Arguments to runspace
        $script:powershell.AddScript($ScriptBlock)
        $script:powershell.AddArgument($ArgumentList)
        $script:powershell.RunspacePool = $sync.runspace

        $script:handle = $script:powershell.BeginInvoke()

        if ($script:handle.IsCompleted)
        {
            $script:powershell.EndInvoke($script:handle)
            $script:powershell.Dispose()
            $sync.runspace.Dispose()
            $sync.runspace.Close()

            [System.GC]::Collect()
        }
}


function PlayMusic {

    Invoke-RunspaceWithScriptBlock -ScriptBlock {

        $audioUrls = @(
            "https://epsilon.vgmsite.com/soundtracks/far-cry-3/iqgdbfrhtw/17.%20Further%20%28feat.%20Serena%20McKinney%29.mp3",
            "https://dl.vgmdownloads.com/soundtracks/hollow-knight-original-soundtrack/qqrmmaqyqg/26.%20Hollow%20Knight.mp3",
            "https://dl.vgmdownloads.com/soundtracks/assassin-s-creed-unity-vol.-1/hxqrvcoyfj/01.%20Unity.mp3",
            "https://dl.vgmdownloads.com/soundtracks/assassin-s-creed-3/jgevpclfcr/01.%20Assassin%27s%20Creed%20III%20Main%20Theme.mp3",
            "https://dl.vgmdownloads.com/soundtracks/assassins-creed-mirage-original-game-soundtrack-2023/axtwruyduh/01.%20Mirage%20Theme.mp3",
            "https://vgmsite.com/soundtracks/assassins-creed-ezios-family-m-me-remix-2022/qdxeshajdz/01.%20Ezio%27s%20Family%20%28M%C3%B8me%20Remix%29.mp3",
            "https://epsilon.vgmsite.com/soundtracks/assassin-s-creed-iv-black-flag/zxpesokhkg/1-02%20Pyrates%20Beware.mp3",
            "https://vgmsite.com/soundtracks/battlefield-3/tabqykkp/01.%20Battlefield%203%20Main%20Theme.mp3",
            "https://archive.org/download/GrandTheftAuto4ThemeSong_201904/Grand%20Theft%20Auto%204%20Theme%20Song.mp3"
        )
    
        $global:mediaPlayer = New-Object -ComObject WMPlayer.OCX
        $global:playlistPaused = $false

        Function PlayAudio($url) {
            try {
                $mediaItem = $global:mediaPlayer.newMedia($url)
                $global:mediaPlayer.currentPlaylist.appendItem($mediaItem)
                $global:mediaPlayer.controls.play()
            }
            catch {
            }
        }
        
    
        # Function to shuffle the playlist
        Function ShuffleArray {
            param([array]$array)
            $count = $array.Length
            for ($i = 0; $i -lt $count; $i++) {
                $randomIndex = Get-Random -Minimum $i -Maximum $count
                $temp = $array[$i]
                $array[$i] = $array[$randomIndex]
                $array[$randomIndex] = $temp
            }
        }
    
        # Shuffle the playlist
        ShuffleArray -array $audioUrls
    
        # Function to play the entire shuffled playlist
        Function PlayShuffledPlaylist {
            foreach ($url in $audioUrls) {
                PlayAudio $url
                # Wait for the track to finish playing
                while ($global:mediaPlayer.playState -eq 3 -or $global:mediaPlayer.playState -eq 6) {
                    Start-Sleep -Milliseconds 100
                }
            }
        }

        

        
    
        # Play the shuffled playlist indefinitely
        while ($true) 
        {
            PlayShuffledPlaylist
        }


        
    }


    $window.FindName('toggleMusic').add_click({


        Write-Host "emad"
    
        $global:mediaPlayer.controls.pause()
    
    
    })
    

}


PlayMusic *> $null


#region Function to filter a list based on a search input
function Search{
    
    # Retrieves the search input, converts it to lowercase, and filters the list based on the input
    $filter = $window.FindName('searchInput').Text.ToLower()
    $collectionView = [System.Windows.Data.CollectionViewSource]::GetDefaultView($sync.list.Items)
    $collectionView.Filter = {
        param($item)
        $item -like "*$filter*"
    }

}
#endregion




# Show Custom Msg
function Show-CustomDialog {
    
    param(
        [string]$Message,
        [int]$Width = 300,
        [int]$Height = 200
    )

    Add-Type -AssemblyName PresentationFramework

    # Define theme colors
    $foregroundColor = [Windows.Media.Brushes]::Black
    $backgroundColor = [Windows.Media.Brushes]::White
    $font = New-Object Windows.Media.FontFamily("Consolas")
    $borderColor = [Windows.Media.Brushes]::Black
    $buttonBackgroundColor = [Windows.Media.Brushes]::Black
    $buttonForegroundColor = [Windows.Media.Brushes]::White
    $shadowColor = [Windows.Media.ColorConverter]::ConvertFromString("#AAAAAAAA")

    # Create a custom dialog window
    $dialog = New-Object Windows.Window
    $dialog.Title = "About"
    $dialog.Height = $Height
    $dialog.Width = $Width
    $dialog.Margin = New-Object Windows.Thickness(10)  # Add margin to the entire dialog box
    $dialog.WindowStyle = [Windows.WindowStyle]::None  # Remove title bar and window controls
    $dialog.ResizeMode = [Windows.ResizeMode]::NoResize  # Disable resizing
    $dialog.WindowStartupLocation = [Windows.WindowStartupLocation]::CenterScreen  # Center the window
    $dialog.Foreground = $foregroundColor
    $dialog.Background = $backgroundColor
    $dialog.FontFamily = $font

    # Create a Border for the green edge with rounded corners
    $border = New-Object Windows.Controls.Border
    $border.BorderBrush = $borderColor
    $border.BorderThickness = New-Object Windows.Thickness(1)  # Adjust border thickness as needed
    $border.CornerRadius = New-Object Windows.CornerRadius(0)  # Adjust the radius for rounded corners

    # Create a drop shadow effect
    $dropShadow = New-Object Windows.Media.Effects.DropShadowEffect
    $dropShadow.Color = $shadowColor
    $dropShadow.Direction = 270
    $dropShadow.ShadowDepth = 5
    $dropShadow.BlurRadius = 0

    # Apply drop shadow effect to the border
    $dialog.Effect = $dropShadow

    $dialog.Content = $border

    # Create a grid for layout inside the Border
    $grid = New-Object Windows.Controls.Grid
    $border.Child = $grid

    # Add the following line to show gridlines
    #$grid.ShowGridLines = $true

    # Add the following line to set the background color of the grid
    $grid.Background = [Windows.Media.Brushes]::Transparent
    # Add the following line to make the Grid stretch
    $grid.HorizontalAlignment = [Windows.HorizontalAlignment]::Stretch
    $grid.VerticalAlignment = [Windows.VerticalAlignment]::Stretch

    # Add the following line to make the Border stretch
    $border.HorizontalAlignment = [Windows.HorizontalAlignment]::Stretch
    $border.VerticalAlignment = [Windows.VerticalAlignment]::Stretch


    # Set up Row Definitions
    $row0 = New-Object Windows.Controls.RowDefinition
    $row0.Height = [Windows.GridLength]::Auto

    $row1 = New-Object Windows.Controls.RowDefinition
    $row1.Height = [Windows.GridLength]::new(1, [Windows.GridUnitType]::Star)

    $row2 = New-Object Windows.Controls.RowDefinition
    $row2.Height = [Windows.GridLength]::Auto

    # Add Row Definitions to Grid
    $grid.RowDefinitions.Add($row0)
    $grid.RowDefinitions.Add($row1)
    $grid.RowDefinitions.Add($row2)
        
    # Add StackPanel for horizontal layout with margins
    $stackPanel = New-Object Windows.Controls.StackPanel
    $stackPanel.Margin = New-Object Windows.Thickness(10)  # Add margins around the stack panel
    $stackPanel.Orientation = [Windows.Controls.Orientation]::Horizontal
    $stackPanel.HorizontalAlignment = [Windows.HorizontalAlignment]::Left  # Align to the left
    $stackPanel.VerticalAlignment = [Windows.VerticalAlignment]::Top  # Align to the top

    $grid.Children.Add($stackPanel)
    [Windows.Controls.Grid]::SetRow($stackPanel, 0)  # Set the row to the second row (0-based index)

    $viewbox = New-Object Windows.Controls.Viewbox
    $viewbox.Width = 25
    $viewbox.Height = 25
    

    # Add "Winutil" text
    $IttTextBlock = New-Object Windows.Controls.TextBlock
    $IttTextBlock.Text = "ITT"
    $IttTextBlock.FontSize = 18  # Adjust font size as needed
    $IttTextBlock.Foreground = $foregroundColor
    $IttTextBlock.Margin = New-Object Windows.Thickness(10, 5, 10, 5)  # Add margins around the text block
    $stackPanel.Children.Add($IttTextBlock)

    # Add TextBlock for information with text wrapping and margins
    $messageTextBlock = New-Object Windows.Controls.TextBlock
    $messageTextBlock.Text = $Message
    $messageTextBlock.TextWrapping = [Windows.TextWrapping]::Wrap  # Enable text wrapping
    $messageTextBlock.HorizontalAlignment = [Windows.HorizontalAlignment]::Left
    $messageTextBlock.VerticalAlignment = [Windows.VerticalAlignment]::Top
    $messageTextBlock.Margin = New-Object Windows.Thickness(10)  # Add margins around the text block
    $grid.Children.Add($messageTextBlock)
    [Windows.Controls.Grid]::SetRow($messageTextBlock, 1)  # Set the row to the second row (0-based index)

    # Add OK button
    $okButton = New-Object Windows.Controls.Button
    $okButton.Content = "OK"
    $okButton.Width = 80
    $okButton.Height = 30
    $okButton.HorizontalAlignment = [Windows.HorizontalAlignment]::Center
    $okButton.VerticalAlignment = [Windows.VerticalAlignment]::Bottom
    $okButton.Margin = New-Object Windows.Thickness(0, 0, 0, 10)
    $okButton.Background = $buttonBackgroundColor
    $okButton.Foreground = $buttonForegroundColor
    $okButton.BorderBrush = $borderColor

    $okButton.Add_Click({
        $dialog.Close()
    })
    $grid.Children.Add($okButton)
    [Windows.Controls.Grid]::SetRow($okButton, 2)  # Set the row to the third row (0-based index)

    # Handle Escape key press to close the dialog
    $dialog.Add_KeyDown({
        if ($_.Key -eq 'Escape') {
            $dialog.Close()
        }
    })

    # Set the OK button as the default button (activated on Enter)
    $okButton.IsDefault = $true

    # Show the custom dialog
    $dialog.ShowDialog()
}

#region Theme Functions
$global:isDarkMode = $global:themePreference

# Function to toggle between dark and light modes
function Toggle-Theme {


    try {
    if ($global:isDarkMode -eq "Dark") {
        Switch-ToLightMode
        $global:isDarkMode = -not $global:isDarkMode

    } else {
        Switch-ToDarkMode
        $global:isDarkMode = -not $global:isDarkMode
    }
    } catch {
        Write-Host "Error toggling theme: $_"
    }


}

# Function to switch to dark mode
function Switch-ToDarkMode {
    try {
        $window.FindName('themeText').Header = "Light Mode"
        $theme = $window.FindResource("DarkTheme")
        Update-Theme $theme "Dark"
    } catch {
        Write-Host "Error switching to dark mode: $_"
    }
}

# Function to switch to light mode
function Switch-ToLightMode {
    try {
        $window.FindName('themeText').Header = "Dark Mode"
        $theme = $window.FindResource("LightTheme")
        Update-Theme $theme "Light"
    } catch {
        Write-Host "Error switching to light mode: $_"
    }
}

# Function to update the theme
function Update-Theme ($theme, $mode) {
    $window.Resources.MergedDictionaries.Clear()
    $window.Resources.MergedDictionaries.Add($theme)
    Set-ItemProperty -Path "HKCU:\Software\ITTEmadadel" -Name "Theme" -Value $mode -Force
}

#endregion
function ChangeTap() {
    

    if($window.FindName('apps').IsSelected)
    {
        $window.FindName('installBtn').Visibility = "Visible"
        $window.FindName('applyBtn').Visibility = "Hidden"
        #$Window.FindName('itemLink').Visibility = "Visible"

    }

    if($window.FindName('tweeks').IsSelected)
    {
        $window.FindName('applyBtn').Visibility = "Visible"
        $window.FindName('installBtn').Visibility = "Hidden"
        #$Window.FindName('itemLink').Visibility = "Visible"

    }
}



#===========================================================================
# End functions
#===========================================================================
$sync.configs.applications = '[
  {
    "Name": "Thorium",
    "Description": "A web browser designed for smooth and secure browsing experiences.",
    "winget": "Alex313031.Thorium",
    "choco": "thorium",
    "category": "Browsers",
    "check": "false"
  },
  {
    "Name": "Firefox",
    "Description": "A widely-used open-source web browser known for its speed, privacy features, and customization options.",
    "winget": "Mozilla.Firefox",
    "choco": "firefox",
    "category": "Browsers",
    "check": "true"
  },
  {
    "Name": "Add block extension [Firefox]",
    "Description": "An extension for Firefox browser that enhances browsing by blocking intrusive ads and pop-ups.",
    "winget": "#",
    "choco": "adblockplusfirefox",
    "category": "Browsers",
    "check": "false"
  },
  {
    "Name": "Microsoft Edge",
    "Description": "Microsoft''s web browser built for fast and secure internet surfing, integrating seamlessly with Windows ecosystem.",
    "winget": "Microsoft.Edge",
    "choco": "microsoft-edge",
    "category": "Browsers",
    "check": "false"
  },
  {
    "Name": "Google Chrome",
    "Description": "A popular web browser known for its speed, simplicity, and vast ecosystem of extensions.",
    "winget": "Google.Chrome",
    "choco": "googlechrome",
    "category": "Browsers",
    "check": "false"
  },
  {
    "Name": "uBlock Origin extension [Chrome]",
    "Description": "A powerful ad-blocking extension for Chrome, providing users with an ad-free browsing experience.",
    "winget": "#",
    "choco": "ublockorigin-chrome",
    "category": "Browsers",
    "check": "false"
  },
  {
    "Name": "Chromium",
    "Description": "An open-source web browser project that serves as the foundation for many browsers, including Google Chrome.",
    "winget": "eloston.ungoogled-chromium",
    "choco": "chromium",
    "category": "Browsers",
    "check": "false"
  },
  {
    "Name": "Brave",
    "Description": "A privacy-focused web browser that blocks ads and trackers, offering faster and safer browsing experiences.",
    "winget": "Brave.Brave",
    "choco": "brave",
    "category": "Brave.Brave",
    "check": "false"
  },
  {
    "Name": "Tor Browser",
    "Description": "A web browser that prioritizes user privacy by routing internet traffic through a global network of servers, enabling anonymous browsing.",
    "winget": "TorProject.TorBrowser",
    "choco": "tor-browser",
    "category": "Brave.Brave",
    "check": "false"
  },
  {
    "Name": "Internet Download Manager",
    "Description": "A popular download manager tool that accelerates downloads and allows users to organize and schedule downloads efficiently.",
    "winget": "Tonec.InternetDownloadManager",
    "choco": "internet-download-manager",
    "category": "Browsers",
    "check": "true"
  },
  {
    "Name": "K-Lite Mega Codec Pack",
    "Description": "Comprehensive collection of audio and video codecs, filters, and tools, enabling playback of various media formats.",
    "winget": "CodecGuide.K-LiteCodecPack.Mega",
    "choco": "k-litecodecpackfull",
    "category": "Media",
    "check": "true"
  },
  {
    "Name": "PotPlayer",
    "Description": "A multimedia player with a sleek interface and advanced features, supporting a wide range of audio and video formats.",
    "winget": "Daum.PotPlayer",
    "choco": "potplayer",
    "category": "Media",
    "check": "false"
  },
  {
    "Name": "VLC",
    "Description": "A versatile media player capable of playing almost any multimedia file format, with support for various streaming protocols.",
    "winget": "VideoLAN.VLC",
    "choco": "vlc.install",
    "category": "Media",
    "check": "false"
  },
  {
    "Name": "Kodi",
    "Description": "A powerful open-source media center software that allows users to organize and stream their media collections.",
    "winget": "#",
    "choco": "kodi",
    "category": "Media",
    "check": "false"
  },
  {
    "Name": "Jellyfin",
    "Description": "An open-source media server software that enables users to stream their media libraries across devices, providing a self-hosted alternative to commercial services.",
    "winget": "#",
    "choco": "jellyfin",
    "category": "Media",
    "check": "false"
  },
  {
    "Name": "Winamp",
    "Description": "A classic media player known for its customizable interface and extensive plugin support, providing a nostalgic music playback experience.",
    "winget": "#",
    "choco": "winamp",
    "category": "Media",
    "check": "false"
  },
  {
    "Name": "Aimp",
    "Description": "A lightweight and feature-rich audio player with support for various audio formats and customizable interface themes.",
    "winget": "#",
    "choco": "aimp",
    "category": "Media",
    "check": "false"
  },
  {
    "Name": "OpenOffice",
    "Description": "An open-source office productivity suite offering word processing, spreadsheet, presentation, and other office tools, compatible with Microsoft Office formats.",
    "winget": "Apache.OpenOffice",
    "choco": "openoffice",
    "category": "Documents",
    "check": "false"
  },
  {
    "Name": "FoxitReader",
    "Description": "A lightweight and feature-rich PDF reader with annotation, form filling, and document signing capabilities.",
    "winget": "Foxit.FoxitReader",
    "choco": "foxitreader",
    "category": "Documents",
    "check": "false"
  },
  {
    "Name": "LibreOffice",
    "Description": "A powerful open-source office suite providing word processing, spreadsheet, presentation, and other office tools, compatible with Microsoft Office formats.",
    "winget": "TheDocumentFoundation.LibreOffice",
    "choco": "libreoffice-fresh",
    "category": "Documents",
    "check": "false"
  },
  {
    "Name": "SumatraPDF",
    "Description": "A lightweight and fast PDF reader with minimalistic design and focus on simplicity and speed.",
    "winget": "SumatraPDF.SumatraPDF",
    "choco": "sumatrapdf.install",
    "category": "Documents",
    "check": "false"
  },
  {
    "Name": "WinRAR",
    "Description": "A popular file compression and archiving utility that supports various archive formats and offers advanced features such as encryption and self-extracting archives.",
    "winget": "RARLab.WinRAR",
    "choco": "winrar",
    "category": "Compression",
    "check": "false"
  },
  {
    "Name": "7-Zip",
    "Description": "An open-source file archiver with a high compression ratio, supporting various archive formats and providing a powerful command-line interface.",
    "winget": "7zip.7zip",
    "choco": "7zip",
    "category": "Compression",
    "check": "false"
  },
  {
    "Name": "QQPlayer",
    "Description": "A multimedia player with support for a wide range of audio and video formats, featuring built-in codecs and additional functionalities such as screen capturing and video conversion.",
    "winget": "Tencent.QQPlayer",
    "choco": "Tencent.QQPlayer",
    "category": "Media",
    "check": "false"
  },
  {
    "Name": "Telegram Desktop",
    "Description": "A cross-platform messaging app with a focus on speed and security, offering end-to-end encryption and a wide range of features such as group chats, file sharing, and stickers.",
    "winget": "Telegram.TelegramDesktop",
    "choco": "telegram",
    "category": "Communication",
    "check": "false"
  },
  {
    "Name": "Meta Messenger",
    "Description": "A messaging app that allows users to connect with friends and family through text messages, voice calls, and video calls, offering various multimedia sharing features.",
    "winget": "WhatsApp.WhatsApp",
    "choco": "messenger",
    "category": "Communication",
    "check": "false"
  },
  {
    "Name": "Skype",
    "Description": "A communication platform that enables users to make voice and video calls, send instant messages, and share files, supporting both individual and group conversations.",
    "winget": "Microsoft.Skype",
    "choco": "skype",
    "category": "Communication",
    "check": "false"
  },
  {
    "Name": "Zoom",
    "Description": "A video conferencing app that facilitates online meetings, webinars, and virtual events, allowing participants to interact through video, audio, and chat.",
    "winget": " Zoom.Zoom",
    "choco": "zoom",
    "category": "Communication",
    "check": "false"
  },
  {
    "Name": "Microsoft Teams",
    "Description": "A collaboration platform that combines workplace chat, video meetings, file storage, and application integration, enhancing teamwork and productivity within organizations.",
    "winget": "Microsoft.Teams",
    "choco": "microsoft-teams.install",
    "category": "Communication",
    "check": "false"
  },
  {
    "Name": "Discord",
    "Description": "A VoIP application and digital distribution platform designed for creating communities and connecting gamers, providing text, voice, and video communication features.",
    "winget": "Discord.Discord",
    "choco": "discord",
    "category": "Communication",
    "check": "false"
  },
  {
    "Name": "TeamViewer",
    "Description": "A remote access and support software that enables users to remotely control computers, transfer files, and collaborate online, facilitating remote work and IT support.",
    "winget": "TeamViewer.TeamViewer",
    "choco": "teamviewer",
    "category": "File Sharing",
    "check": "false"
  },
  {
    "Name": "GIMP",
    "Description": "A free and open-source raster graphics editor used for image retouching and editing, drawing and painting, and converting between different image formats.",
    "winget": "GIMP.GIMP",
    "choco": "gimp",
    "category": "Imaging",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2005 (x86) Redistributable",
    "Description": "A set of runtime components required to run applications developed with Microsoft Visual C++ 2005, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2005.x86",
    "choco": "vcredist2005",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2005 (x64) Redistributable",
    "Description": "A set of runtime components required to run 64-bit applications developed with Microsoft Visual C++ 2005, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2005.x64",
    "choco": "vcredist2005",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2008 (x86) Redistributable",
    "Description": "A set of runtime components required to run applications developed with Microsoft Visual C++ 2008, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2008.x86",
    "choco": "vcredist2008",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2008 (x64) Redistributable",
    "Description": "A set of runtime components required to run 64-bit applications developed with Microsoft Visual C++ 2008, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2008.x64",
    "choco": "vcredist2008",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2010 (x86) Redistributable",
    "Description": "A set of runtime components required to run applications developed with Microsoft Visual C++ 2010, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2010.x86",
    "choco": "vcredist2010",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2010 (x64) Redistributable",
    "Description": "A set of runtime components required to run 64-bit applications developed with Microsoft Visual C++ 2010, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2010.x64",
    "choco": "vcredist2010",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2012 (x86) Redistributable",
    "Description": "A set of runtime components required to run applications developed with Microsoft Visual C++ 2012, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2012.x86",
    "choco": "vcredist2012",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2012 (x64) Redistributable",
    "Description": "A set of runtime components required to run 64-bit applications developed with Microsoft Visual C++ 2012, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2012.x64",
    "choco": "vcredist2012",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2013 (x86) Redistributable",
    "Description": "A set of runtime components required to run applications developed with Microsoft Visual C++ 2013, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2013.x86",
    "choco": "vcredist2013",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2013 (x64) Redistributable",
    "Description": "A set of runtime components required to run 64-bit applications developed with Microsoft Visual C++ 2013, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2013.x64",
    "choco": "vcredist2013",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2015-2022 (x64) Redistributable",
    "Description": "A set of runtime components required to run 64-bit applications developed with Microsoft Visual C++ 2015-2022, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2015+.x64",
    "choco": "vcredist2015",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2015-2022  (x86) Redistributable",
    "Description": "A set of runtime components required to run applications developed with Microsoft Visual C++ 2015-2022, providing libraries, DLLs, and other resources.",
    "winget": "Microsoft.VCRedist.2015+.x86",
    "choco": "vcredist2015",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "NET Framework All Versions",
    "Description": "A comprehensive and consistent programming model for building applications that have visually stunning user experiences, seamless and secure communication, and the ability to model a range of business processes.",
    "winget": "#",
    "choco": "dotnet-all",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "NVidia Display Driver",
    "Description": "The software component that allows the operating system and installed software to communicate with and control the NVIDIA graphics processing unit (GPU).",
    "winget": "#",
    "choco": "nvidia-display-driver",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "NVIDIA GeForce Now",
    "Description": "A cloud-based gaming service provided by NVIDIA that allows users to play video games on supported devices via a remote gaming PC hosted on NVIDIA''s servers.",
    "winget": "Nvidia.GeForceNow",
    "choco": "nvidia-geforce-now",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "NVIDIA PhysX",
    "Description": "A physics processing unit (PPU) software development kit (SDK) offered by NVIDIA for real-time physics simulations in video games.",
    "winget": "Nvidia.PhysX",
    "choco": "physx.legacy",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Steam",
    "Description": "A digital distribution platform developed by Valve Corporation for purchasing and playing video games.",
    "winget": "Valve.Steam",
    "choco": "steam",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Ubisoft Connect",
    "Description": "A digital distribution, digital rights management, multiplayer, and communications service developed by Ubisoft, providing access to Ubisoft''s games, rewards, and social features.",
    "winget": "Ubisoft.Connect",
    "choco": "ubisoft-connect",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "GameSave Manager",
    "Description": "A utility tool that allows users to backup, restore, and transfer their game saves between different gaming platforms and directories.",
    "winget": "InsaneMatt.GameSaveManager",
    "choco": "gamesavemanager",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "StreamlabsOBS",
    "Description": "A free and open-source streaming software built on top of OBS Studio with additional features tailored for streamers, such as built-in alerts, overlays, and chat integration.",
    "winget": "Streamlabs.StreamlabsOBS",
    "choco": "streamlabs-obs",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "OBS Studio",
    "Description": "A free and open-source software for video recording and live streaming. It offers high performance real-time video/audio capturing and mixing.",
    "winget": " OBSProject.OBSStudio",
    "choco": "obs-studio.install",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Lively Wallpaper",
    "Description": "A software that allows users to set animated and interactive wallpapers on their Windows desktop, providing various customization options.",
    "winget": " #",
    "choco": "lively",
    "category": "Gaming",
    "check": "false"
  },
  {
    "Name": "Driver Easy",
    "Description": "A driver update tool that automatically detects, downloads, and installs device drivers for the user''s computer hardware.",
    "winget": "Easeware.DriverEasy",
    "choco": "drivereasyfree",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Snappy Driver Installer",
    "Description": "A free and open-source tool for updating and installing device drivers on Windows, offering offline driver updates and wide hardware support.",
    "winget": "samlab-ws.SnappyDriverInstaller",
    "choco": "snappy-driver-installer",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "1Password",
    "Description": "A password manager that securely stores login credentials, credit card information, and other sensitive data in an encrypted vault, accessible with a single master password.",
    "winget": "AgileBits.1Password",
    "choco": "1password",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "MiniTool Partition Wizard",
    "Description": "A disk partition management tool that allows users to create, resize, move, merge, split, copy, and convert partitions on their hard drives or storage devices.",
    "winget": "MiniTool.PartitionWizard.Free 12.8",
    "choco": "partitionwizard",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "AOMEI Backupper",
    "Description": "A backup and recovery software that enables users to create system backups, disk backups, partition backups, and file backups to protect data against system failures and data loss.",
    "winget": "AOMEI.Backupper.Standard",
    "choco": "backupper-standard",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Recuva recover",
    "Description": "A data recovery software that helps users retrieve accidentally deleted files, including photos, documents, videos, and more, from various storage devices such as hard drives, USB drives, and memory cards.",
    "winget": "#",
    "choco": "recuva",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "CCleaner",
    "Description": "A system optimization, privacy, and cleaning tool that helps users remove unused files, clean up temporary files, and optimize their Windows PCs for better performance.",
    "winget": "Piriform.CCleaner",
    "choco": "ccleaner",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "BCUninstaller",
    "Description": "A powerful uninstaller tool for Windows that allows users to remove unwanted programs, plugins, and Windows Store apps, along with leftover files and registry entries.",
    "winget": "Klocman.BulkCrapUninstaller",
    "choco": "bulk-crap-uninstaller",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "HWiNFO",
    "Description": "A hardware information and diagnostic tool that provides detailed information about the hardware components of a computer system, including sensors, temperature, voltage, and more.",
    "winget": "REALiX.HWiNFO",
    "choco": "hwinfo.install",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Speccy",
    "Description": "A system information tool that provides detailed information about the hardware and operating system of a computer, including CPU, RAM, motherboard, graphics card, and storage devices.",
    "winget": "Piriform.Speccy",
    "choco": "speccy",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "FurMark",
    "Description": "A graphics card stress testing and benchmarking utility that helps users test the stability, cooling, and performance of their GPU by rendering a highly intensive 3D graphics scene.",
    "winget": "Geeks3D.FurMark",
    "choco": "furmark",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Hard Disk Sentinel",
    "Description": "A hard disk monitoring and analysis software that helps users monitor the health, performance, and temperature of their hard drives, SSDs, and other storage devices.",
    "winget": "#",
    "choco": "hdsentinel",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "CPUID CPU-Z",
    "Description": "A system monitoring utility that provides detailed information about the CPU, motherboard, memory, and other hardware components of a computer system.",
    "winget": "CPUID.CPU-Z",
    "choco": "cpu-z.install",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "HandBrake",
    "Description": "A free and open-source video transcoder tool that converts video files from one format to another, supporting a wide range of input and output formats.",
    "winget": "HandBrake.HandBrake",
    "choco": "handbrake.install",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Rufus",
    "Description": "A utility tool for creating bootable USB drives from ISO images, helping users to install or run operating systems, such as Windows, Linux, or other utilities.",
    "winget": "Rufus.Rufus",
    "choco": "rufus",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Virtual CloneDrive",
    "winget": "#",
    "choco": "virtualclonedrive",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Virtual CloneDrive",
    "Description": "A free software that allows users to mount disc images as virtual drives, enabling them to access the content of ISO, BIN, and CCD files without the need for physical discs.",
    "winget": "#",
    "choco": "virtualclonedrive",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Utilso",
    "Description": "A powerful ISO image management tool that enables users to create, edit, extract, and burn ISO files, providing a comprehensive solution for managing disk image files.",
    "winget": "SerhiiSlieptsov.Utilso",
    "choco": "ultraiso",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Ventoy",
    "Description": "An open-source tool for creating bootable USB drives with multiple ISO files, allowing users to boot various operating systems or utilities directly from a single USB drive.",
    "winget": "Ventoy.Ventoy",
    "choco": "ventoy",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "AutoHotkey",
    "Description": "A scripting language for automating repetitive tasks and creating macros on Windows, allowing users to customize keyboard shortcuts, remap keys, and automate mouse actions.",
    "winget": "AutoHotkey.AutoHotkey",
    "choco": "autohotkey",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Rainmeter",
    "Description": "A customizable desktop customization tool that displays customizable skins, widgets, and applets on the Windows desktop, providing users with real-time system monitoring and information.",
    "winget": "#",
    "choco": "rainmeter",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "FxSound",
    "Description": "An audio enhancer software that improves the sound quality of music, videos, and games on Windows PCs by providing advanced audio processing and customization options.",
    "winget": "FxSoundLLC.FxSound",
    "choco": "fxsound",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "HiSuite",
    "Description": "A management tool for Huawei smartphones and tablets that allows users to manage, backup, and transfer data between their devices and Windows PCs, including contacts, messages, and multimedia files.",
    "winget": "Huawei.HiSuite",
    "choco": "Huawei.HiSuite",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Vysor",
    "Description": "A screen mirroring and remote control software that enables users to view and control Android devices from Windows PCs, allowing for easy screen sharing, app testing, and troubleshooting.",
    "winget": "#",
    "choco": "vysor",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "Unifiedremote",
    "Description": "A remote control app that turns smartphones into universal remote controls for Windows, macOS, and Linux computers, allowing users to control media playback, presentations, and more.",
    "winget": "unifiedremote",
    "choco": "unifiedremote",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "AnyDesk",
    "Description": "A remote desktop software that allows users to access and control Windows, macOS, Linux, Android, and iOS devices from anywhere, providing secure and reliable remote access.",
    "winget": "AnyDeskSoftwareGmbH.AnyDesk",
    "choco": "anydesk.install",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "qBittorrent",
    "Description": "A free and open-source BitTorrent client for downloading and uploading files via the BitTorrent protocol, providing users with a lightweight and feature-rich torrenting experience.",
    "winget": "qBittorrent.qBittorrent",
    "choco": "qbittorrent",
    "category": "Utilities",
    "check": "false"
  },
  {
    "Name": "XAMPP",
    "Description": "XAMPP is a free and open-source cross-platform web server solution stack package developed by Apache Friends, consisting mainly of the Apache HTTP Server, MariaDB database, and interpreters for scripts written in the PHP and Perl programming languages.",
    "winget": "XAMPP 8.2",
    "choco": "xampp-81",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Visual Studio Professional 2022",
    "Description": "Visual Studio Professional 2022 is an integrated development environment (IDE) from Microsoft. It is used to develop computer programs, websites, web apps, web services, and mobile apps.",
    "winget": "Microsoft.VisualStudio.2022.Professional",
    "choco": "visualstudio2022professional",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Visual Studio Community 2022",
    "Description": "Visual Studio Community 2022 is a free, fully-featured, and extensible IDE for individual developers, open source projects, academic research, education, and small professional teams.",
    "winget": "Microsoft.VisualStudio.2022.Community",
    "choco": "visualstudio2022community",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Godot game engine",
    "Description": "Godot is a feature-packed, cross-platform game engine for creating 2D and 3D games. It provides a comprehensive set of tools and features to develop games efficiently and quickly.",
    "winget": "#",
    "choco": "godot",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual Studio Code",
    "Description": "Visual Studio Code is a free source-code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git control, syntax highlighting, intelligent code completion, snippets, and code refactoring.",
    "winget": "Microsoft.VisualStudioCode",
    "choco": "vscode",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "PyCharm Community Edition",
    "Description": "PyCharm Community Edition is a free and open-source IDE for Python development. It provides smart code completion, code inspections, on-the-fly error highlighting, and quick-fixes.",
    "winget": "JetBrains.PyCharm.Community",
    "choco": "pycharm-community",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "PyCharm Professional Edition",
    "Description": "PyCharm Professional Edition is a powerful IDE for professional Python development. It includes advanced features such as database tools, web development support, and scientific tools integration.",
    "winget": "JetBrains.PyCharm.Professional",
    "choco": "pycharm",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Jetbrains Rider",
    "Description": "Rider is a cross-platform .NET IDE developed by JetBrains. It supports C#, VB.NET, F#, ASP.NET, JavaScript, TypeScript, HTML, CSS, and SQL languages and frameworks.",
    "winget": "JetBrains.Rider",
    "choco": "jetbrains-rider",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Node.js LTS",
    "Description": "Node.js is a JavaScript runtime built on Chrome''s V8 JavaScript engine. LTS (Long Term Support) releases are supported for an extended period and provide stability for production environments.",
    "winget": "OpenJS.NodeJS",
    "choco": "nodejs-lts",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Electrum-LTS",
    "Description": "Electrum is a lightweight Bitcoin wallet focused on speed and simplicity, with support for hardware wallets and multisig functionality. LTS (Long Term Support) releases provide stability and security updates for an extended period.",
    "winget": "#",
    "choco": "electronim",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Notepad++",
    "Description": "Notepad++ is a free source code editor and Notepad replacement that supports several languages. It offers syntax highlighting, code folding, auto-completion, and other features for efficient code editing.",
    "winget": "Notepad++.Notepad++",
    "choco": "notepadplusplus",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Windows Terminal",
    "Description": "Windows Terminal is a modern terminal application for users of command-line tools and shells like Command Prompt, PowerShell, and Windows Subsystem for Linux (WSL). It provides multiple tabs, custom themes, and GPU-accelerated text rendering.",
    "winget": "Microsoft.WindowsTerminal",
    "choco": "microsoft-windows-terminal",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Powershell core",
    "Description": "PowerShell Core is a cross-platform (Windows, Linux, and macOS) automation and configuration tool/framework that works well with your existing tools and is optimized for dealing with structured data (e.g., JSON, CSV, XML, etc.), REST APIs, and object models.",
    "winget": "powershell-core",
    "choco": "powershell-core",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Python",
    "Description": "Python is a popular high-level programming language known for its simplicity and versatility. It is used in various fields such as web development, data science, machine learning, and automation.",
    "winget": "Python.Python.3.9",
    "choco": "python",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Git",
    "Description": "Git is a free and open-source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.",
    "winget": "Git.Git",
    "choco": "git",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "GitHub Desktop",
    "Description": "GitHub Desktop is a seamless way to contribute to projects on GitHub and GitHub Enterprise. It provides an intuitive interface for managing repositories, branching, committing, and merging code changes.",
    "winget": "GitHub.GitHubDesktop",
    "choco": "github-desktop",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Docker Desktop",
    "Description": "Docker Desktop is an easy-to-install application for Windows and macOS that enables developers to build, share, and run containerized applications and microservices locally.",
    "winget": "Docker.DockerDesktop",
    "choco": "docker-desktop",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Docker Compose",
    "Description": "Docker Compose is a tool for defining and running multi-container Docker applications. It allows you to use a YAML file to configure your application''s services, networks, and volumes.",
    "winget": "#",
    "choco": "docker-compose",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "PowerToys",
    "Description": "PowerToys is a set of utilities for power users to tune and streamline their Windows experience for greater productivity. It includes tools like FancyZones for window management, PowerRename for batch renaming files, and more.",
    "winget": "Microsoft.PowerToys",
    "choco": "powertoys",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "FL Studio",
    "Description": "FL Studio is a digital audio workstation (DAW) developed by Image-Line. It allows you to compose, arrange, record, edit, mix, and master professional-quality music.",
    "winget": "ImageLine.FLStudio",
    "choco": "ImageLine.FLStudio",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Android Debug Bridge",
    "Description": "Android Debug Bridge (ADB) is a command-line tool that allows you to communicate with an Android device. It is used for various debugging tasks such as installing and debugging apps.",
    "winget": "ImageLine.FLStudio",
    "choco": "adb",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Universal ADB Drivers",
    "Description": "Universal ADB Drivers are drivers that provide compatibility with a wide range of Android devices for debugging purposes. They allow you to connect your Android device to a computer and use ADB commands.",
    "winget": "ImageLine.FLStudio",
    "choco": "universal-adb-drivers",
    "category": "Developer",
    "check": "false"
  },
  {
    "Name": "Scrcpy",
    "Description": "Scrcpy is a free and open-source tool that allows you to display and control your Android device from a computer. It provides high-performance screen mirroring and supports various input methods.",
    "winget": "#",
    "choco": "scrcpy",
    "category": "Developer",
    "check": "false"
  }
]' | convertfrom-json
  
$sync.configs.tweaks = '[
  {
    "name": "System File Checker",
    "description": "Use the System File Checker tool to repair missing or corrupted system files",
    "repo": "null",
    "script": "sfc /scannow",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Disk Cleanup",
    "description": "Clean temporary files that are not necessary",
    "repo": "null",
    "script": "cleanmgr.exe /d C: /VERYLOWDISK Dism.exe /online /Cleanup-Image /StartComponentCleanup /ResetBase",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Restore All Windows Services to Default",
    "description": "If you face a problem with some system services, you can restore all services to Default.",
    "repo": "null",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/WindowsTweaks/main/restore.bat | Invoke-Expression",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Remove Folder Shortcuts From Windows'' File Explorer",
    "description": "Remove Documents, Videos, Pictures, Desktop. Shortcuts from File Explorer ",
    "repo": "https://github.com/emadadel4/WindowsTweaks",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/WindowsTweaks/main/rm.ps1 | Invoke-Expression",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Fix stutter in games",
    "description": "Fix Stutter in Games (Disable GameBarPresenceWriter). Windows 10/11",
    "repo": "https://github.com/emadadel4/Fix-Stutter-in-Games",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/Fix-Stutter-in-Games/main/fix.ps1 | Invoke-Expression",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Remove Unnecessary Windows 10 Apps",
    "description": "BingNews, GetHelp, Getstarted, Messaging, Microsoft3DViewer, MicrosoftOfficeHub, MicrosoftSolitaireCollection, News, Office.Lens, Office.OneNote, Office.Sway, OneConnect, People, Print3D, RemoteDesktop, SkypeApp, StorePurchaseApp, Office.Todo.List, Whiteboard, WindowsAlarms, WindowsCamera, windowscommunicationsapps, WindowsFeedbackHub, WindowsMaps, WindowsSoundRecorder, Xbox.TCUI, XboxApp, XboxGameOverlay, XboxIdentityProvider, XboxSpeechToTextOverlay, ZuneMusic, ZuneVideo, Windows.Cortana, MSPaint",
    "repo": "https://github.com/emadadel4/WindowsTweaks",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/WindowsTweaks/main/debloater.ps1 | Invoke-Expression",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Enable the Ultimate Performance Power Plan",
    "description": "Enable the Ultimate Performance Power Plan",
    "repo": "https://github.com/emadadel4/WindowsTweaks",
    "script": "powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61",
    "fromUrl": "true",
    "category": "tweak"
  },
  {
    "name": " Reset the TCP/IP Stack",
    "description": "If you have an internet problem, Reset network configuration",
    "repo": "null",
    "script": "netsh int ip reset",
    "check": "true",
    "category": "tweak"
  }
]' | convertfrom-json
  
$inputXML =  '
<!--Window-->
    <Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Name="Window" Title="ITT @emadadel4" WindowStartupLocation = "CenterScreen" 
        Background="{DynamicResource BGColor}"
        Height="600" Width="955" MinWidth="677" MinHeight="400" ShowInTaskbar = "True" Icon="https://raw.githubusercontent.com/emadadel4/ITT/main/icon.ico">
    
        <Window.Resources>

             <!--Scrollbar Thumbs-->
 <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
     <Setter Property="Template">
         <Setter.Value>
             <ControlTemplate TargetType="{x:Type Thumb}">
                 <Grid x:Name="Grid">
                     <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                     <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{TemplateBinding Background}" />
                 </Grid>
                 <ControlTemplate.Triggers>
                     <Trigger Property="Tag" Value="Horizontal">
                         <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                         <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                     </Trigger>
                 </ControlTemplate.Triggers>
             </ControlTemplate>
         </Setter.Value>
     </Setter>
 </Style>
 <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
     <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
     <Setter Property="Foreground" Value="{DynamicResource FGColor}" />
     <Setter Property="Background" Value="Transparent" />
     <Setter Property="Width" Value="8" />
     <Setter Property="Template">
         <Setter.Value>
             <ControlTemplate TargetType="{x:Type ScrollBar}">
                 <Grid x:Name="GridRoot" Width="8" Background="{TemplateBinding Background}">
                     <Grid.RowDefinitions>
                         <RowDefinition Height="0.00001*" />
                     </Grid.RowDefinitions>
                     <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                         <Track.Thumb>
                             <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                         </Track.Thumb>
                         <Track.IncreaseRepeatButton>
                             <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                         </Track.IncreaseRepeatButton>
                         <Track.DecreaseRepeatButton>
                             <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                         </Track.DecreaseRepeatButton>
                     </Track>
                 </Grid>
                 <ControlTemplate.Triggers>
                     <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                         <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                     </Trigger>
                     <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                         <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                     </Trigger>
                     <Trigger Property="IsEnabled" Value="false">
                         <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                     </Trigger>
                     <Trigger Property="Orientation" Value="Horizontal">
                         <Setter TargetName="GridRoot" Property="LayoutTransform">
                             <Setter.Value>
                                 <RotateTransform Angle="-90" />
                             </Setter.Value>
                         </Setter>
                         <Setter TargetName="PART_Track" Property="LayoutTransform">
                             <Setter.Value>
                                 <RotateTransform Angle="-90" />
                             </Setter.Value>
                         </Setter>
                         <Setter Property="Width" Value="Auto" />
                         <Setter Property="Height" Value="8" />
                         <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                         <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                         <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                     </Trigger>
                 </ControlTemplate.Triggers>
             </ControlTemplate>
         </Setter.Value>
     </Setter>
 </Style>
 <!--End Scrollbar Thumbs-->

                    <!--Button Style-->
            <Style TargetType="Button">
                <Setter Property="Background" Value="{DynamicResource BGButtonColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource FGButtonColor}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border CornerRadius="20" Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center"
                                                    VerticalAlignment="Center"/>
                                
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource BGButtonColor}"/>
                        <Setter Property="Foreground" Value="{DynamicResource FGButtonColor}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        <!--End Button Style-->


        <!--Textbox Style-->
            <Style TargetType="TextBox">
                <Setter Property="Foreground" Value="{DynamicResource FGTextColor}"/>
                <Setter Property="Background" Value="{DynamicResource FGColor}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBox">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    CornerRadius="15"> <!-- Set CornerRadius here -->
                                <ScrollViewer x:Name="PART_ContentHost" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BGButtonColor}"/>
                        </Trigger>
                    </Style.Triggers>
            </Style>
        <!--End Textbox Style-->

        <!--TextBlock Style-->
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource FGTextColor}"/>
            </Style>
        <!--End TextBlock Style-->

        <!--CheckBox Style-->
            <Style TargetType="CheckBox">
                <Setter Property="Foreground" Value="{DynamicResource FGTextColor}"/>
                <Setter Property="Margin" Value="8"/>

            </Style>
        <!--End CheckBox Style-->

        <!--Menu Style-->
            <Style TargetType="Menu">
                <Setter Property="Background" Value="{DynamicResource BGColor}"/>
            </Style>
        <!--End Menu Style-->


        <!--MenuItem Style-->
            <Style TargetType="MenuItem">
                <Setter Property="Background" Value="{DynamicResource BGColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource DefaultTextColor}"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="MenuItem">
                            <Border Background="{DynamicResource BGColor}"
                                    BorderThickness="0"> <!-- Set BorderThickness to 0 -->
                                <Grid>
                                    <ContentPresenter Content="{TemplateBinding Header}"
                                                    Margin="6"/>
                                    <Popup IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                        AllowsTransparency="True"
                                        Focusable="False"
                                        PopupAnimation="Fade">
                                        <Border Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                                                BorderThickness="0"> <!-- Set BorderThickness to 0 -->
                                            <ScrollViewer CanContentScroll="True"
                                                        Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                <ItemsPresenter Margin="0"/>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        <!--End MenuItem Style-->

        <!--ListViewItem Style-->
            <Style TargetType="ListViewItem">
            <Setter Property="Background" Value="{DynamicResource FGColor}"/>
        </Style>
        <!--End ListViewItem Style-->


            <!--Light Theme-->


        <!-- Light mode styles -->
        <ResourceDictionary x:Key="LightTheme">
                <SolidColorBrush x:Key="BGColor" Color="White"/>
                <SolidColorBrush x:Key="FGColor" Color="WhiteSmoke"/>
                <SolidColorBrush x:Key="BGButtonColor" Color="#382bf0  " />
                <SolidColorBrush x:Key="FGButtonColor" Color="White" />
                <SolidColorBrush x:Key="FGTextColor" Color="Black" />
                <SolidColorBrush x:Key="DefaultTextColor" Color="Black"/>
                <SolidColorBrush x:Key="BorderBrush" Color="#212121"/>
        </ResourceDictionary>

        <!-- Dark mode styles -->
        <ResourceDictionary x:Key="DarkTheme">
                <SolidColorBrush x:Key="BGColor" Color="#121212 "/>
                <SolidColorBrush x:Key="FGColor" Color="#282828"/>
                <SolidColorBrush x:Key="BGButtonColor" Color="#1DB954" />
                <SolidColorBrush x:Key="FGButtonColor" Color="White" />
                <SolidColorBrush x:Key="FGTextColor" Color="WhiteSmoke" />
                <SolidColorBrush x:Key="DefaultTextColor" Color="White"/>
                <SolidColorBrush x:Key="BorderBrush" Color="WhiteSmoke" />
        </ResourceDictionary>

       
        

        </Window.Resources>

    <Grid>
     
       <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="222"/>
        </Grid.ColumnDefinitions>


        <Menu Grid.Row="0" Grid.ColumnSpan="3" BorderBrush="Transparent" BorderThickness="0">
            <MenuItem Header="File" BorderBrush="Transparent" BorderThickness="0">
                <MenuItem Header="Load Preset"/>
                <MenuItem Header="Save Preset"/>
            </MenuItem>
            <MenuItem Name="themeText" Header="Light Mode"/>
        </Menu>

        <!--Header Section-->

            <!--Logo-->
                <StackPanel Margin="20" Orientation="Horizontal" HorizontalAlignment="Left"  VerticalAlignment="Center" Grid.Row="1" Grid.ColumnSpan="3" >

                    <Ellipse Name="about" Width="50" Height="50" Cursor="Hand">
                        <Ellipse.Fill>
                            <ImageBrush ImageSource="https://avatars.githubusercontent.com/u/19177373?v=4.png" />
                        </Ellipse.Fill>
                    </Ellipse>
            <!--End Logo-->

            <!--Catagory Section-->
                <StackPanel Name="catg" Margin="20,0,0,0" Orientation="Horizontal" HorizontalAlignment="Left">

                    <Button Name="all"
                    Cursor="Hand"  
                    Content="All" 
                    Height="20" Width="60" 
                    Margin="4"  
                    Background="{DynamicResource BGColor}" 
                    Foreground="{DynamicResource DefaultTextColor}"
                    
                    />

                    <Button Name="r" 
                    Cursor="Hand" 
                    Content="Fresh Start" 
                    Height="20" 
                    Width="100" Margin="4"  
                    Background="{DynamicResource BGColor}" 
                    Foreground="{DynamicResource DefaultTextColor}"

                    />

                    <Button Name="m" 
                    Cursor="Hand"  
                    Content="Media" 
                    Height="20" 
                    Width="60" 
                    Margin="4"  
                    Background="{DynamicResource BGColor}" 
                    Foreground="{DynamicResource DefaultTextColor}"
                    
                    />

                    <Button Name="b" 
                    Cursor="Hand"  
                    Content="Browsers" 
                    Height="20" Width="60" 
                    Margin="4"  
                    Background="{DynamicResource BGColor}" 
                    Foreground="{DynamicResource DefaultTextColor}"
                    
                    />

                    <Button Name="g" 
                    Cursor="Hand"  
                    Content="Gaming" 
                    Height="20" 
                    Width="60" 
                    Margin="4"  
                    Background="{DynamicResource BGColor}" 
                    Foreground="{DynamicResource DefaultTextColor}"
                    
                    />

                    <Button Name="d" 
                    Cursor="Hand"  
                    Content="Developer" 
                    Height="20" 
                    Width="70" 
                    Margin="4"  
                    Background="{DynamicResource BGColor}" 
                    Foreground="{DynamicResource DefaultTextColor}"

                    />

                    <Button Name="u" 
                    Cursor="Hand"  
                    Content="Utilities" 
                    Height="20" 
                    Width="60" 
                    Margin="4"  
                    Background="{DynamicResource BGColor}" 
                    Foreground="{DynamicResource DefaultTextColor}"
                    
                    />
                    <Button Name="c" 
                    Cursor="Hand" 
                    Content="Communication" 
                    Height="20" 
                    Width="100" 
                    Margin="4"  
                    Background="{DynamicResource BGColor}" 
                    Foreground="{DynamicResource DefaultTextColor}"
                    
                    />

                    </StackPanel>
                </StackPanel>
            <!--End Catagory Section-->

        <!--End Header Section-->

            <!--TabControl-->
        <TabControl x:Name="taps" TabStripPlacement="Left" Margin="0, 10, 0, 10" Grid.Row="2"  BorderBrush="Transparent" Foreground="White" Background="Transparent">
                <TabControl.Resources>


                    <Style TargetType="TabItem">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="TabItem">
                                    <Border Name="Border" CornerRadius="15" BorderThickness="0,0,0,0" Padding="5" BorderBrush="Gainsboro"  Margin="10,5">
                                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BGButtonColor}" />
                                            <Setter Property="Foreground" Value="{DynamicResource FGButtonColor}" />

                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="False">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource FGColor}" />
                                            <Setter Property="Foreground" Value="{DynamicResource FGTextColor}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TabControl.Resources>
                <TabItem Header="Apps" Name="apps" BorderBrush="{x:Null}" Padding="16">
                    <TabItem.Content>
                        <ListView Margin="10" ScrollViewer.VerticalScrollBarVisibility="Auto" x:Name="list" BorderBrush="{x:Null}" Background="{x:Null}">
                                            <CheckBox Content="Thorium"/>

                            <CheckBox Content="Firefox"/>

                            <CheckBox Content="Add block extension [Firefox]"/>

                            <CheckBox Content="Microsoft Edge"/>

                            <CheckBox Content="Google Chrome"/>

                            <CheckBox Content="uBlock Origin extension [Chrome]"/>

                            <CheckBox Content="Chromium"/>

                            <CheckBox Content="Brave"/>

                            <CheckBox Content="Tor Browser"/>

                            <CheckBox Content="Internet Download Manager"/>

                            <CheckBox Content="K-Lite Mega Codec Pack"/>

                            <CheckBox Content="PotPlayer"/>

                            <CheckBox Content="VLC"/>

                            <CheckBox Content="Kodi"/>

                            <CheckBox Content="Jellyfin"/>

                            <CheckBox Content="Winamp"/>

                            <CheckBox Content="Aimp"/>

                            <CheckBox Content="OpenOffice"/>

                            <CheckBox Content="FoxitReader"/>

                            <CheckBox Content="LibreOffice"/>

                            <CheckBox Content="SumatraPDF"/>

                            <CheckBox Content="WinRAR"/>

                            <CheckBox Content="7-Zip"/>

                            <CheckBox Content="QQPlayer"/>

                            <CheckBox Content="Telegram Desktop"/>

                            <CheckBox Content="Meta Messenger"/>

                            <CheckBox Content="Skype"/>

                            <CheckBox Content="Zoom"/>

                            <CheckBox Content="Microsoft Teams"/>

                            <CheckBox Content="Discord"/>

                            <CheckBox Content="TeamViewer"/>

                            <CheckBox Content="GIMP"/>

                            <CheckBox Content="Microsoft Visual C++ 2005 (x86) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2005 (x64) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2008 (x86) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2008 (x64) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2010 (x86) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2010 (x64) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2012 (x86) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2012 (x64) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2013 (x86) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2013 (x64) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2015-2022 (x64) Redistributable"/>

                            <CheckBox Content="Microsoft Visual C++ 2015-2022  (x86) Redistributable"/>

                            <CheckBox Content="NET Framework All Versions"/>

                            <CheckBox Content="NVidia Display Driver"/>

                            <CheckBox Content="NVIDIA GeForce Now"/>

                            <CheckBox Content="NVIDIA PhysX"/>

                            <CheckBox Content="Steam"/>

                            <CheckBox Content="Ubisoft Connect"/>

                            <CheckBox Content="GameSave Manager"/>

                            <CheckBox Content="StreamlabsOBS"/>

                            <CheckBox Content="OBS Studio"/>

                            <CheckBox Content="Lively Wallpaper"/>

                            <CheckBox Content="Driver Easy"/>

                            <CheckBox Content="Snappy Driver Installer"/>

                            <CheckBox Content="1Password"/>

                            <CheckBox Content="MiniTool Partition Wizard"/>

                            <CheckBox Content="AOMEI Backupper"/>

                            <CheckBox Content="Recuva recover"/>

                            <CheckBox Content="CCleaner"/>

                            <CheckBox Content="BCUninstaller"/>

                            <CheckBox Content="HWiNFO"/>

                            <CheckBox Content="Speccy"/>

                            <CheckBox Content="FurMark"/>

                            <CheckBox Content="Hard Disk Sentinel"/>

                            <CheckBox Content="CPUID CPU-Z"/>

                            <CheckBox Content="HandBrake"/>

                            <CheckBox Content="Rufus"/>

                            <CheckBox Content="Virtual CloneDrive"/>

                            <CheckBox Content="Virtual CloneDrive"/>

                            <CheckBox Content="Utilso"/>

                            <CheckBox Content="Ventoy"/>

                            <CheckBox Content="AutoHotkey"/>

                            <CheckBox Content="Rainmeter"/>

                            <CheckBox Content="FxSound"/>

                            <CheckBox Content="HiSuite"/>

                            <CheckBox Content="Vysor"/>

                            <CheckBox Content="Unifiedremote"/>

                            <CheckBox Content="AnyDesk"/>

                            <CheckBox Content="qBittorrent"/>

                            <CheckBox Content="XAMPP"/>

                            <CheckBox Content="Visual Studio Professional 2022"/>

                            <CheckBox Content="Visual Studio Community 2022"/>

                            <CheckBox Content="Godot game engine"/>

                            <CheckBox Content="Microsoft Visual Studio Code"/>

                            <CheckBox Content="PyCharm Community Edition"/>

                            <CheckBox Content="PyCharm Professional Edition"/>

                            <CheckBox Content="Jetbrains Rider"/>

                            <CheckBox Content="Node.js LTS"/>

                            <CheckBox Content="Electrum-LTS"/>

                            <CheckBox Content="Notepad++"/>

                            <CheckBox Content="Windows Terminal"/>

                            <CheckBox Content="Powershell core"/>

                            <CheckBox Content="Python"/>

                            <CheckBox Content="Git"/>

                            <CheckBox Content="GitHub Desktop"/>

                            <CheckBox Content="Docker Desktop"/>

                            <CheckBox Content="Docker Compose"/>

                            <CheckBox Content="PowerToys"/>

                            <CheckBox Content="FL Studio"/>

                            <CheckBox Content="Android Debug Bridge"/>

                            <CheckBox Content="Universal ADB Drivers"/>

                            <CheckBox Content="Scrcpy"/>

            
                        </ListView>
                    </TabItem.Content>
                </TabItem>
                <TabItem Header="Tweaks" x:Name="tweeks" Padding="16" BorderBrush="{x:Null}" Background="{x:Null}">
                    <TabItem.Content>
                        <ListView Name="tweaks"  Margin="10" ScrollViewer.VerticalScrollBarVisibility="Auto" BorderBrush="{x:Null}" Background="{x:Null}">
                                            <CheckBox Content="System File Checker"/>

                            <CheckBox Content="Disk Cleanup"/>

                            <CheckBox Content="Restore All Windows Services to Default"/>

                            <CheckBox Content="Remove Folder Shortcuts From Windows'' File Explorer"/>

                            <CheckBox Content="Fix stutter in games"/>

                            <CheckBox Content="Remove Unnecessary Windows 10 Apps"/>

                            <CheckBox Content="Enable the Ultimate Performance Power Plan"/>

                            <CheckBox Content=" Reset the TCP/IP Stack"/>

            
                        </ListView>
                    </TabItem.Content>
                </TabItem>
            </TabControl>
        <!--End TabControl-->

        <!--Main Section-->
            <Grid  Grid.Row="2" Grid.Column="2"  Grid.RowSpan="2">

                <StackPanel Orientation="Vertical">


                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">

                        <Grid>
                            <TextBox Padding="8"
                            Width="188"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" 
                            Text="{Binding Text_searchInput}"
                            x:Name="searchInput" 
                            />

                            <TextBlock IsHitTestVisible="False" 
                            Text="Search"
                            VerticalAlignment="Center" 
                            HorizontalAlignment="Left"
                            Margin="16,0,0,0"
                            Foreground="{DynamicResource FGTextColor}">

                            <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Text, ElementName=searchInput}" Value="">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </StackPanel>

                    <TextBlock Name="itemLink" 
                        Foreground="{DynamicResource BGButtonColor}" 
                        Visibility="Hidden" 
                        TextWrapping="Wrap" 
                        Text="" 
                        Margin="20,15,15,0" 
                    />

                    <ScrollViewer VerticalScrollBarVisibility="Auto"
                        Height="233"
                        Margin="20,15,15,0" 
                    >
                        <TextBlock Name="description" 
                            Text=""
                            TextWrapping="Wrap" 
                            Foreground="{DynamicResource DefaultTextColor}"/>
                    </ScrollViewer>

                    

                </StackPanel>

                <!--Install Button-->
                    <Button
                    Name="installBtn"
                    Content="Install"
                    FontSize="15"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Bottom"
                    Cursor="Hand"
                    Width="100" Height="40" Margin="50"/>
                <!--End Install Button-->

                <!--Apply Button-->
                    <Button
                    Name="applyBtn"
                    Content="Apply"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Bottom"
                    Cursor="Hand"
                    FontSize="15"
                    Visibility="Hidden"
                    Width="100" Height="40" Margin="50"/>
                <!--End Apply Button-->

            </Grid>
        <!--End Main Section-->

        <!--Footer Section-->
            <Grid Grid.Row="4">
                <TextBlock Name="quotes"
                HorizontalAlignment="Left"
                VerticalAlignment="Center" 
                Padding="16" TextWrapping="Wrap" 
                Text="When I finished building my boat, the sea dried up."
                />
            </Grid>
        <!--End Footer Section-->

    </Grid>
        
    </Window>
<!--End Window-->

'
#===========================================================================
# Load XMAL 
#===========================================================================

#region Load XMAL
# Set the maximum number of threads for the RunspacePool to the number of threads on the machine
$maxthreads = [int]$env:NUMBER_OF_PROCESSORS

# Create a new session state for parsing variables into our runspace
$hashVars = New-object System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList 'sync',$sync,$Null
$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()

# Add the variable to the session state
$InitialSessionState.Variables.Add($hashVars)

# Create the runspace pool
$sync.runspace = [runspacefactory]::CreateRunspacePool(
    1,                      # Minimum thread count
    $maxthreads,            # Maximum thread count
    $InitialSessionState,   # Initial session state
    $Host                   # Machine to create runspaces on
)

# Open the RunspacePool instance
$sync.runspace.Open()

[xml]$XAML = $inputXML

$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$window = [Windows.Markup.XamlReader]::Load($reader)

# Read the XAML file
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
try
{ 
    $window = [Windows.Markup.XamlReader]::Load($reader)
}
catch [System.Management.Automation.MethodInvocationException] {
   
    Write-Host "error"
}
#endregion
#===========================================================================
# End Load XMAL 
#===========================================================================

#===========================================================================
# Loops 
#===========================================================================

#region Generate items from json file
$sync.list = $Window.FindName("list")

# Define a function to populate the list with checkboxes
function PopulateList {
    foreach ($app in $sync.configs.applications) {
        $checkbox = New-Object System.Windows.Controls.CheckBox
        $checkbox.Content = $app.name
        $sync.list.Items.Add($checkbox)
    }
}

# Define a function to update the description and link when an item is selected
function UpdateDescriptionAndLink {
    $selectedAppName = $sync.list.SelectedItem.Content

    foreach ($app in $sync.configs.applications) {
        if ($app.name -eq $selectedAppName) {
            $Window.FindName("description").Text = $app.description
            $Window.FindName('itemLink').Text = "$($app.name) official website"
            break
        }
    }
}

# Define a function to open the official website of the selected application
function OpenOfficialWebsite {
    $selectedAppName = $sync.list.SelectedItem.Content

    foreach ($app in $sync.configs.applications) {
        if ($app.name -eq $selectedAppName) {
            Start-Process ("https://duckduckgo.com/?hps=1&q=%5C" + $app.name)
            break
        }
    }
}

# Add event handlers
$Window.FindName("apps").add_Loaded({
    PopulateList
})

$sync.list.Add_SelectionChanged({
    $Window.FindName('itemLink').Visibility = "Visible"
    UpdateDescriptionAndLink
})

$Window.FindName('itemLink').add_MouseLeftButtonDown({
    OpenOfficialWebsite
})


#endregion
#region Generate tweaks from json file
$sync.tweaks = $Window.FindName("tweaks")

# Add loaded event handler
$Window.FindName("tweeks").add_Loaded({
   
    # Add selection changed event handler
    $sync.tweaks.Add_SelectionChanged({
        $selectedItem = $sync.tweaks.SelectedItem.Content
        foreach ($data in $sync.configs.tweaks) {
            if ($data.name -eq $selectedItem) {
                $Window.FindName('description').Text = $data.description
                $Window.FindName('itemLink').Visibility = if ($data.repo -ne "null") { "Visible" } else { "Hidden" }
                $Window.FindName('itemLink').Text = "Github repository"
                break
            }
        }
    })

    # Add mouse left button down event handler for item link
    $Window.FindName('itemLink').add_MouseLeftButtonDown({
        $selectedItem = $sync.tweaks.SelectedItem.Content
        foreach ($data in $sync.configs.tweaks) {
            if ($selectedItem -eq $data.name -and $data.repo -ne "null") {
                Start-Process $data.repo
                break
            }
        }
    })

})

#endregion
#===========================================================================
# End Loops 
#===========================================================================
CheckChoco

#===========================================================================
# Events 
#===========================================================================

# Buttons
$window.FindName('taps').add_SelectionChanged({ChangeTap})

$window.FindName('installBtn').add_click({Invoke-Install})

$window.FindName('applyBtn').add_click({ApplyTweaks})

$window.FindName('searchInput').add_TextChanged({Search})

$window.FindName('searchInput').add_GotFocus({ShowAllApplications})

$window.FindName('about').add_MouseLeftButtonDown({About})

$window.FindName('themeText').add_click({Toggle-Theme})


# Function to play or pause music
Function TogglePlayback {
    if ($global:playlistPaused) {
        ResumePlayback
    } else {
        PausePlayback
    }
}

# Catgoray bar buttons
$window.FindName('b').add_click({FilterApplicationsByCategory($window.FindName('b').Content)})
$window.FindName('m').add_click({FilterApplicationsByCategory($window.FindName('m').Content)})
$window.FindName('d').add_click({FilterApplicationsByCategory($window.FindName('d').Content)})
$window.FindName('g').add_click({FilterApplicationsByCategory($window.FindName('g').Content)})
$window.FindName('u').add_click({FilterApplicationsByCategory($window.FindName('u').Content)})
$window.FindName('c').add_click({FilterApplicationsByCategory($window.FindName('c').Content)})
$window.FindName('r').add_click({ShowRecommendedApplications($window.FindName('r').Content)})

$Window.Add_Closing({
    Write-Host "Bye :)"
})

#===========================================================================
# End Events 
#===========================================================================

if ($global:themePreference -eq "Dark") {
    Switch-ToDarkMode
} elseif ($global:themePreference -eq "Light") {
    Switch-ToLightMode
} else {
    # Default to light mode if preference not found
    Switch-ToLightMode
}


 $window.ShowDialog() | out-null
