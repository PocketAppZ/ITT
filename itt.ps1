
    ################################################################################################################
    ###                                                                                                          ###
    ###                            This file is automatically generated                                          ###
    ###         ___ _____ _____     ____  _____ __  __    _    ____       _    ____  _____ _                     ###
    ###        |_ _|_   _|_   _|   / __ \| ____|  \/  |  / \  |  _ \     / \  |  _ \| ____| |                    ###
    ###         | |  | |   | |    / / _` |  _| | |\/| | / _ \ | | | |   / _ \ | | | |  _| | |                    ###
    ###         | |  | |   | |   | | (_| | |___| |  | |/ ___ \| |_| |  / ___ \| |_| | |___| |___                 ###
    ###         |_|  |_|   |_|    \ \__,_|_____|_|  |_/_/   \_\____/  /_/   \_\____/|_____|_____|                ###
    ###                           \____/                                                                         ###
    ###                                                                                                          ###
    ###                                    This is Emad adel an Binary                                           ###
    ###                01000101 01001101 01000001 01000100  01000001 01000100 01000101 01001100                  ###
    ###                                                                                                          ###
    ################################################################################################################
    

<#
.Dev
    Author         : Emad Adel @emadadel4
    GitHub         : https://github.com/emadadel4
    Telgram        : https://t.me/emadadel4
    Website        : https://eprojects.orgfree.com/
    Version        : 24.04.14
#>

if (!(Test-Path -Path $ENV:TEMP)) {
    New-Item -ItemType Directory -Force -Path $ENV:TEMP
}

# Load DLLs
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Windows.Forms

# Variable to sync between runspaces
$sync = [Hashtable]::Synchronized(@{})
$sync.PSScriptRoot = $PSScriptRoot
$sync.author =  "Emad Adel"
$sync.version = "24.04.14"
$sync.github =  "github.com/emadadel4"
$sync.telgram = "t.me/emadadel4"
$sync.website = "eprojects.orgfree.com"

$sync.configs = @{}
$sync.ProcessRunning = $false

$currentPid = [System.Security.Principal.WindowsIdentity]::GetCurrent()
$principal = new-object System.Security.Principal.WindowsPrincipal($currentPid)
$adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator



if ($principal.IsInRole($adminRole))
{
    $Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + "(Admin)"
    clear-host
}
else
{
    $newProcess = new-object System.Diagnostics.ProcessStartInfo "PowerShell";
    $newProcess.Arguments = $myInvocation.MyCommand.Definition;
    $newProcess.Verb = "runas";
    [System.Diagnostics.Process]::Start($newProcess);
    break
}
#===========================================================================
# Start functions
#===========================================================================
function About{

    $authorInfo = @"
        Developer : $($sync.author)
        GitHub    : $($sync.github)
        Telgram   : $($sync.telgram)
        Website   : $($sync.website)
        Version   : $($sync.version)
"@

    Show-CustomDialog -Message $authorInfo -Width 400 
}
function Catgoray($cat){

    <#
    .DESCRIPTION
    This function filters and populates a list of applications based on the specified category.

    .PARAMETER cat
    The category based on which the applications are filtered.

    .EXAMPLE
    Catgoray -cat "SomeCategory"

    .EXAMPLE
    ShowAll "Show all apps"
    #>

    $list.Items.Clear()

    foreach ($item in $sync.configs.applications)
    {
        if($item.catgory -eq $cat)
        {
            $checkbox = New-Object System.Windows.Controls.CheckBox
            $list.Items.Add($checkbox)
            $checkbox.Content = $item.name
        }
    }
}

function Recommended() {
    

    $list.Items.Clear()

    foreach ($item in $sync.configs.applications)
    {
        if($item.check -eq 'true')
        {
            $checkbox = New-Object System.Windows.Controls.CheckBox
            $list.Items.Add($checkbox)
            $checkbox.Content = $item.name
        }
    }
}

function ShowAll{
    $list.Items.Clear()
    foreach ($item in $sync.configs.applications)
    {
            $checkbox = New-Object System.Windows.Controls.CheckBox
            $list.Items.Add($checkbox)
            $checkbox.Content = $item.name
    }
}

function CheckChoco {

    try {

        if((Get-Command -Name choco -ErrorAction Ignore))
        {
Write-Host 
"
            ___ _____ _____     ____  _____ __  __    _    ____       _    ____  _____ _                     
           |_ _|_   _|_   _|   / __ \| ____|  \/  |  / \  |  _ \     / \  |  _ \| ____| |                    
            | |  | |   | |    / / _` |  _| | |\/| | / _ \ | | | |   / _ \ | | | |  _| | |                    
            | |  | |   | |   | | (_| | |___| |  | |/ ___ \| |_| |  / ___ \| |_| | |___| |___                 
            |_|  |_|   |_|    \ \__,_|_____|_|  |_/_/   \_\____/  /_/   \_\____/|_____|_____|                
                               \____/                                                                         

                                 This is Emad adel an Binary
                01000101 01001101 01000001 01000100  01000001 01000100 01000101 01001100      
                            Chocolatey is installed You Good to go                  
"
            return
        }

        Write-Host "Chocolatey is not installed, installing now"
        Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) -ErrorAction Stop
        powershell choco feature enable -n allowGlobalConfirmation
    }
    Catch {
        Write-Host "--Chocolatey failed to install---"
    }
}


# Create a runspace to execute Winget command
$runspace = [runspacefactory]::CreateRunspace()
$runspace.Open()

$runspace2 = [runspacefactory]::CreateRunspace()
$runspace2.Open()

# Define script block for downloading software
$scriptBlock = {

    param($packageIDs, $window,$winget)

    function UpdateStatusLabel($text) {
        $window.Dispatcher.Invoke([Action]{
            $window.FindName('description').Text = $text
        })
    }

    foreach ($id in $packageIDs) {


        # Run Winget command to download software
        Start-Process -FilePath "choco" -ArgumentList "install $id -y --force --ignore-checksums" -NoNewWindow -Wait
        
        # Update status label
        UpdateStatusLabel("Downloading... Depends on your internet speed")
    }

    # Update status label after downloading all programs
    UpdateStatusLabel("Downloaded and installed successfully")

}

$scriptBlock2 = {

    param($packageIDs2, $window,$winget)

    function UpdateStatusLabel($text) {
        $window.Dispatcher.Invoke([Action]{
            $window.FindName('description').Text = $text
        })
    }

    foreach ($id in $packageIDs2) {


       #Start-Process Invoke-RestMethod $id | Invoke-Expression  -NoNewWindow -Wait

       #Start-Process $id -NoNewWindow -Wait


        powershell.exe -Command  $id 
        
        # Update status label
        UpdateStatusLabel("Applying tweeaks...")
    }

    # Update status label after downloading all programs
    UpdateStatusLabel("Successfully")

}

function Invoke-Install() {

    <#
    .SYNOPSIS
    This script contains functions for installing software, applying tweaks, and managing asynchronous downloads.

    .DESCRIPTION
    The functions in this script are used to install software using choco, apply tweaks, and manage asynchronous downloads.

    #>

    $packageIDs = @()
    $result  

    foreach ($item in $list.Items)
    {
        if ($item.IsChecked)
        {
            foreach ($program in $sync.configs.applications)
            {
                if($item.Content -eq $program.name)
                {
                    $packageIDs += $program.choco
                    $result  = $item.IsChecked
                }
            }
        }
    }

    if($result)
    {

        for ($ndx = 1; $ndx -lt $packageIDs.Count; $ndx++){}
            

        $msg = [System.Windows.MessageBox]::Show("Are you sure you want to install $ndx selected programs", "ITT @emadadel", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Question)


        if($msg -eq "Yes")
        {
            # #Start asynchronous download using runspace
            $ps = [powershell]::Create().AddScript($scriptBlock).AddArgument($packageIDs).AddArgument($Window).AddArgument($winget)
            $ps.Runspace = $runspace
            $handle = $ps.BeginInvoke()
            # Update status label
            $window.FindName('description').Text = "Downloading... Depends on your internet speed"
        }
    }
    else
    {
        #show mesg
        [System.Windows.MessageBox]::Show("Select at least one program", "ITT @emadadel", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Question)
    }
}

function ApplyTweaks() {

    $packageIDs2 = @()

    foreach ($item in $sync.tweaks.Items)
    {
        if ($item.IsChecked)
        {
            $result = $item

            foreach ($data in $sync.configs.tweaks)
            {
                if($item.Content -eq $data.name)
                {
                    $packageIDs2 += $data.script
                    
                }
            }
        }
        
    }

    if($result)
    {
        $msg = [System.Windows.MessageBox]::Show("Do you want to apply selected tweeaks?", "ITT @emadadel", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Question)

        if($msg -eq "Yes")
        {
            #Start asynchronous download using runspace
            $ps2 = [powershell]::Create().AddScript($scriptBlock2).AddArgument($packageIDs2).AddArgument($Window).AddArgument($winget)
            $ps2.Runspace = $runspace2
            $handle2 = $ps2.BeginInvoke()
            # Update status label
            $window.FindName('description').Text = "Applying tweeaks..."
        }
    }
    else
    {
        #show mesg
        [System.Windows.MessageBox]::Show("Select at lest one program", "ITT @emadadel", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Question)
    }
}

#region Function to filter a list based on a search input

function Search{
    
    # Retrieves the search input, converts it to lowercase, and filters the list based on the input
    $filter = $window.FindName('searchInput').Text.ToLower()
    $collectionView = [System.Windows.Data.CollectionViewSource]::GetDefaultView($list.Items)
    $collectionView.Filter = {
        param($item)
        $item -like "*$filter*"
    }

}
#endregion


# Show Custom Msg
function Show-CustomDialog {
    
    param(
        [string]$Message,
        [int]$Width = 300,
        [int]$Height = 200
    )

    Add-Type -AssemblyName PresentationFramework

    # Define theme colors
    $foregroundColor = [Windows.Media.Brushes]::Black
    $backgroundColor = [Windows.Media.Brushes]::White
    $font = New-Object Windows.Media.FontFamily("Consolas")
    $borderColor = [Windows.Media.Brushes]::Black
    $buttonBackgroundColor = [Windows.Media.Brushes]::Black
    $buttonForegroundColor = [Windows.Media.Brushes]::White
    $shadowColor = [Windows.Media.ColorConverter]::ConvertFromString("#AAAAAAAA")

    # Create a custom dialog window
    $dialog = New-Object Windows.Window
    $dialog.Title = "About"
    $dialog.Height = $Height
    $dialog.Width = $Width
    $dialog.Topmost = $true
    $dialog.Margin = New-Object Windows.Thickness(10)  # Add margin to the entire dialog box
    $dialog.WindowStyle = [Windows.WindowStyle]::None  # Remove title bar and window controls
    $dialog.ResizeMode = [Windows.ResizeMode]::NoResize  # Disable resizing
    $dialog.WindowStartupLocation = [Windows.WindowStartupLocation]::CenterScreen  # Center the window
    $dialog.Foreground = $foregroundColor
    $dialog.Background = $backgroundColor
    $dialog.FontFamily = $font

    # Create a Border for the green edge with rounded corners
    $border = New-Object Windows.Controls.Border
    $border.BorderBrush = $borderColor
    $border.BorderThickness = New-Object Windows.Thickness(1)  # Adjust border thickness as needed
    $border.CornerRadius = New-Object Windows.CornerRadius(0)  # Adjust the radius for rounded corners

    # Create a drop shadow effect
    $dropShadow = New-Object Windows.Media.Effects.DropShadowEffect
    $dropShadow.Color = $shadowColor
    $dropShadow.Direction = 270
    $dropShadow.ShadowDepth = 5
    $dropShadow.BlurRadius = 0

    # Apply drop shadow effect to the border
    $dialog.Effect = $dropShadow

    $dialog.Content = $border

    # Create a grid for layout inside the Border
    $grid = New-Object Windows.Controls.Grid
    $border.Child = $grid

    # Add the following line to show gridlines
    #$grid.ShowGridLines = $true

    # Add the following line to set the background color of the grid
    $grid.Background = [Windows.Media.Brushes]::Transparent
    # Add the following line to make the Grid stretch
    $grid.HorizontalAlignment = [Windows.HorizontalAlignment]::Stretch
    $grid.VerticalAlignment = [Windows.VerticalAlignment]::Stretch

    # Add the following line to make the Border stretch
    $border.HorizontalAlignment = [Windows.HorizontalAlignment]::Stretch
    $border.VerticalAlignment = [Windows.VerticalAlignment]::Stretch


    # Set up Row Definitions
    $row0 = New-Object Windows.Controls.RowDefinition
    $row0.Height = [Windows.GridLength]::Auto

    $row1 = New-Object Windows.Controls.RowDefinition
    $row1.Height = [Windows.GridLength]::new(1, [Windows.GridUnitType]::Star)

    $row2 = New-Object Windows.Controls.RowDefinition
    $row2.Height = [Windows.GridLength]::Auto

    # Add Row Definitions to Grid
    $grid.RowDefinitions.Add($row0)
    $grid.RowDefinitions.Add($row1)
    $grid.RowDefinitions.Add($row2)
        
    # Add StackPanel for horizontal layout with margins
    $stackPanel = New-Object Windows.Controls.StackPanel
    $stackPanel.Margin = New-Object Windows.Thickness(10)  # Add margins around the stack panel
    $stackPanel.Orientation = [Windows.Controls.Orientation]::Horizontal
    $stackPanel.HorizontalAlignment = [Windows.HorizontalAlignment]::Left  # Align to the left
    $stackPanel.VerticalAlignment = [Windows.VerticalAlignment]::Top  # Align to the top

    $grid.Children.Add($stackPanel)
    [Windows.Controls.Grid]::SetRow($stackPanel, 0)  # Set the row to the second row (0-based index)

    $viewbox = New-Object Windows.Controls.Viewbox
    $viewbox.Width = 25
    $viewbox.Height = 25
    

    # Add "Winutil" text
    $IttTextBlock = New-Object Windows.Controls.TextBlock
    $IttTextBlock.Text = "ITT"
    $IttTextBlock.FontSize = 18  # Adjust font size as needed
    $IttTextBlock.Foreground = $foregroundColor
    $IttTextBlock.Margin = New-Object Windows.Thickness(10, 5, 10, 5)  # Add margins around the text block
    $stackPanel.Children.Add($IttTextBlock)

    # Add TextBlock for information with text wrapping and margins
    $messageTextBlock = New-Object Windows.Controls.TextBlock
    $messageTextBlock.Text = $Message
    $messageTextBlock.TextWrapping = [Windows.TextWrapping]::Wrap  # Enable text wrapping
    $messageTextBlock.HorizontalAlignment = [Windows.HorizontalAlignment]::Left
    $messageTextBlock.VerticalAlignment = [Windows.VerticalAlignment]::Top
    $messageTextBlock.Margin = New-Object Windows.Thickness(10)  # Add margins around the text block
    $grid.Children.Add($messageTextBlock)
    [Windows.Controls.Grid]::SetRow($messageTextBlock, 1)  # Set the row to the second row (0-based index)

    # Add OK button
    $okButton = New-Object Windows.Controls.Button
    $okButton.Content = "OK"
    $okButton.Width = 80
    $okButton.Height = 30
    $okButton.HorizontalAlignment = [Windows.HorizontalAlignment]::Center
    $okButton.VerticalAlignment = [Windows.VerticalAlignment]::Bottom
    $okButton.Margin = New-Object Windows.Thickness(0, 0, 0, 10)
    $okButton.Background = $buttonBackgroundColor
    $okButton.Foreground = $buttonForegroundColor
    $okButton.BorderBrush = $borderColor

    $okButton.Add_Click({
        $dialog.Close()
    })
    $grid.Children.Add($okButton)
    [Windows.Controls.Grid]::SetRow($okButton, 2)  # Set the row to the third row (0-based index)

    # Handle Escape key press to close the dialog
    $dialog.Add_KeyDown({
        if ($_.Key -eq 'Escape') {
            $dialog.Close()
        }
    })

    # Set the OK button as the default button (activated on Enter)
    $okButton.IsDefault = $true

    # Show the custom dialog
    $dialog.ShowDialog()
}

function ChangeTap() {
    
    if($window.FindName('apps').IsSelected)
    {
        $window.FindName('installBtn').Visibility = "Visible"
        $window.FindName('applyBtn').Visibility = "Hidden"
    }

    if($window.FindName('tweeks').IsSelected)
    {
        $window.FindName('applyBtn').Visibility = "Visible"
        $window.FindName('installBtn').Visibility = "Hidden"
    }
}
$sync.configs.applications = '[
  {
    "Name": "Thorium",
    "winget": "Alex313031.Thorium",
    "choco": "thorium",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Firefox",
    "winget": "Mozilla.Firefox",
    "choco": "firefox",
    "catgory": "Browsers",
    "check": "true"
  },
  {
    "Name": "Add block extension [Firefox]",
    "winget": "#",
    "choco": "adblockplusfirefox",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Microsoft Edge",
    "winget": "Microsoft.Edge",
    "choco": "microsoft-edge",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Google Chrome",
    "winget": "Google.Chrome",
    "choco": "googlechrome",
    "catgory": "Browsers",
    "check": "true"
  },
  {
    "Name": "uBlock Origin extension [Chrome]",
    "winget": "#",
    "choco": "ublockorigin-chrome",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Chromium",
    "winget": "eloston.ungoogled-chromium",
    "choco": "chromium",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Brave",
    "winget": "Brave.Brave",
    "choco": "brave",
    "catgory": "Brave.Brave",
    "check": "false"
  },
  {
    "Name": "Tor Browser",
    "winget": "TorProject.TorBrowser",
    "choco": "tor-browser",
    "catgory": "Brave.Brave",
    "check": "false"
  },
  {
    "Name": "Internet Download Manager",
    "winget": "Tonec.InternetDownloadManager",
    "choco": "internet-download-manager",
    "catgory": "Browsers",
    "check": "true"
  },
  {
    "Name": "K-Lite Mega Codec Pack",
    "winget": "CodecGuide.K-LiteCodecPack.Mega",
    "choco": "k-litecodecpackfull",
    "catgory": "Media",
    "check": "true"
  },
  {
    "Name": "PotPlayer",
    "winget": "Daum.PotPlayer",
    "choco": "potplayer",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "VLC",
    "winget": "VideoLAN.VLC",
    "choco": "vlc",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Kodi",
    "winget": "#",
    "choco": "kodi",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Jellyfin",
    "winget": "#",
    "choco": "jellyfin",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Winamp",
    "winget": "#",
    "choco": "winamp",
    "catgory": "Media",
    "check": "true"
  },
  {
    "Name": "Aimp",
    "winget": "#",
    "choco": "aimp",
    "catgory": "Media",
    "check": "false"
  },

  {
    "Name": "OpenOffice",
    "winget": "Apache.OpenOffice",
    "choco": "openoffice",
    "catgory": "Documents",
    "check": "false"
  },
  {
    "Name": "FoxitReader",
    "winget": "Foxit.FoxitReader",
    "choco": "foxitreader",
    "catgory": "Documents",
    "check": "false"
  },
  {
    "Name": "LibreOffice",
    "winget": "TheDocumentFoundation.LibreOffice",
    "choco": "libreoffice-fresh",
    "catgory": "Documents",
    "check": "true"
  },
  {
    "Name": "SumatraPDF",
    "winget": "SumatraPDF.SumatraPDF",
    "choco": "sumatrapdf.install",
    "catgory": "Documents",
    "check": "true"
  },
  {
    "Name": "WinRAR",
    "winget": "RARLab.WinRAR",
    "choco": "winrar",
    "catgory": "Compression",
    "check": "true"
  },
  {
    "Name": "7-Zip",
    "winget": "7zip.7zip",
    "choco": "7zip",
    "catgory": "Compression",
    "check": "false"
  },
  {
    "Name": "QQPlayer",
    "winget": "Tencent.QQPlayer",
    "choco": "Tencent.QQPlayer",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Telegram Desktop",
    "winget": "Telegram.TelegramDesktop",
    "choco": "telegram",
    "catgory": "Communication",
    "check": "true"
  },
  {
    "Name": "Meta Messenger",
    "winget": "WhatsApp.WhatsApp",
    "choco": "messenger",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "Skype",
    "winget": "Microsoft.Skype",
    "choco": "skype",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "Zoom",
    "winget": " Zoom.Zoom",
    "choco": "zoom",
    "catgory": "Communication",
    "check": "true"
  },
  {
    "Name": "Microsoft Teams",
    "winget": "Microsoft.Teams",
    "choco": "microsoft-teams.install",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "Discord",
    "winget": "Discord.Discord",
    "choco": "discord",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "TeamViewer",
    "winget": "TeamViewer.TeamViewer",
    "choco": "teamviewer",
    "catgory": "File Sharing",
    "check": "false"
  },
  {
    "Name": "HiSuite",
    "winget": "Huawei.HiSuite",
    "choco": "Huawei.HiSuite",
    "catgory": "File Sharing",
    "check": "false"
  },
  {
    "Name": "GIMP",
    "winget": "GIMP.GIMP",
    "choco": "gimp",
    "catgory": "Imaging",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2005 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2005.x86",
    "choco": "vcredist2005",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2005 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2005.x64",
    "choco": "vcredist2005",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2008 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2008.x86",
    "choco": "vcredist2008",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2008 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2008.x64",
    "choco": "vcredist2008",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2010 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2010.x86",
    "choco": "vcredist2010",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2010 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2010.x64",
    "choco": "vcredist2010",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2012 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2012.x86",
    "choco": "vcredist2012",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2012 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2012.x64",
    "choco": "vcredist2012",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2013 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2013.x86",
    "choco": "vcredist2013",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2013 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2013.x64",
    "choco": "vcredist2013",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2015-2022 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2015+.x64",
    "choco": "vcredist2015",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "Microsoft Visual C++ 2015-2022  (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2015+.x86",
    "choco": "vcredist2015",
    "catgory": "Gaming",
    "check": "true"
  },
  {
    "Name": "NET Framework All Versions",
    "winget": "#",
    "choco": "dotnet-all",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "NVIDIA GeForce NOW",
    "winget": "Nvidia.GeForceNow",
    "choco": "nvidia-geforce-now",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "NVIDIA PhysX",
    "winget": "Nvidia.PhysX",
    "choco": "physx.legacy",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Steam",
    "winget": "Valve.Steam",
    "choco": "steam",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Ubisoft Connect",
    "winget": "Ubisoft.Connect",
    "choco": "ubisoft-connect",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "GameSave Manager",
    "winget": "InsaneMatt.GameSaveManager",
    "choco": "gamesavemanager",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "StreamlabsOBS",
    "winget": "Streamlabs.StreamlabsOBS",
    "choco": "streamlabs-obs",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "OBS Studio",
    "winget": " OBSProject.OBSStudio",
    "choco": "obs-studio.install",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Lively Wallpaper ",
    "winget": " #",
    "choco": "lively",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Driver Easy",
    "winget": "Easeware.DriverEasy",
    "choco": "drivereasyfree",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Snappy Driver Installer",
    "winget": "samlab-ws.SnappyDriverInstaller",
    "choco": "snappy-driver-installer",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "1Password",
    "winget": "AgileBits.1Password",
    "choco": "1password",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "MiniTool Partition Wizard ",
    "winget": "MiniTool.PartitionWizard.Free 12.8",
    "choco": "partitionwizard",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "AOMEI Backupper",
    "winget": "AOMEI.Backupper.Standard",
    "choco": "backupper-standard",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Recuva recover",
    "winget": "#",
    "choco": "recuva",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "CCleaner",
    "winget": "Piriform.CCleaner",
    "choco": "ccleaner",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "BCUninstaller",
    "winget": "Klocman.BulkCrapUninstaller",
    "choco": "bulk-crap-uninstaller",
    "catgory": "Utilities",
    "check": "true"
  },
  {
    "Name": "HWiNFO",
    "winget": "REALiX.HWiNFO",
    "choco": "hwinfo.install",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Speccy",
    "winget": "Piriform.Speccy",
    "choco": "speccy",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "FurMark",
    "winget": "Geeks3D.FurMark",
    "choco": "furmark",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "CPUID CPU-Z",
    "winget": "CPUID.CPU-Z",
    "choco": "cpu-z.install",
    "catgory": "Utilities",
    "check": "true"
  },
  {
    "Name": "HandBrake",
    "winget": "HandBrake.HandBrake",
    "choco": "handbrake.install",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Rufus",
    "winget": "Rufus.Rufus",
    "choco": "rufus",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Virtual CloneDrive",
    "winget": "#",
    "choco": "virtualclonedrive",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Utilso",
    "winget": "SerhiiSlieptsov.Utilso",
    "choco": "ultraiso",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Ventoy",
    "winget": "Ventoy.Ventoy",
    "choco": "ventoy",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "AutoHotkey",
    "winget": "AutoHotkey.AutoHotkey",
    "choco": "autohotkey",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Rainmeter",
    "winget": "#",
    "choco": "rainmeter",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "FxSound",
    "winget": "FxSoundLLC.FxSound",
    "choco": "fxsound",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "AnyDesk",
    "winget": "AnyDeskSoftwareGmbH.AnyDesk",
    "choco": "anydesk.install",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "qBittorrent",
    "winget": "qBittorrent.qBittorrent",
    "choco": "qbittorrent",
    "catgory": "Utilities",
    "check": "true"
  },
  {
    "Name": "XAMPP",
    "winget": "XAMPP 8.2",
    "choco": "xampp-81",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Visual Studio Professional 2022",
    "winget": "Microsoft.VisualStudio.2022.Professional",
    "choco": "visualstudio2022professional",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Visual Studio Community 2022",
    "winget": "Microsoft.VisualStudio.2022.Community",
    "choco": "visualstudio2022community",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Godot game engine",
    "winget": "#",
    "choco": "godot",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual Studio Code",
    "winget": "Microsoft.VisualStudioCode",
    "choco": "vscode",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "PyCharm Community Edition",
    "winget": "JetBrains.PyCharm.Community",
    "choco": "pycharm-community",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "PyCharm Professional Edition",
    "winget": "JetBrains.PyCharm.Professional",
    "choco": "pycharm",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Jetbrains Rider",
    "winget": "JetBrains.Rider",
    "choco": "jetbrains-rider",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Node.js LTS",
    "winget": "OpenJS.NodeJS",
    "choco": "nodejs-lts",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Electrum-LTS",
    "winget": "#",
    "choco": "electronim",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Notepad++",
    "winget": "Notepad++.Notepad++",
    "choco": "notepadplusplus",

    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Windows Terminal",
    "winget": "Microsoft.WindowsTerminal",
    "choco": "microsoft-windows-terminal",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Powershell core",
    "winget": "powershell-core",
    "choco": "powershell-core",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Python",
    "winget": "Python.Python.3.9",
    "choco": "python",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Git",
    "winget": "Git.Git",
    "choco": "git",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "GitHub Desktop",
    "winget": "GitHub.GitHubDesktop",
    "choco": "github-desktop",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "PowerToys",
    "winget": "Microsoft.PowerToys",
    "choco": "powertoys",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "FL Studio",
    "winget": "ImageLine.FLStudio",
    "choco": "ImageLine.FLStudio",
    "catgory": "Developer",
    "check": "false"
  }
]' | convertfrom-json
  
$sync.configs.quotes = '[
  "“عندما إنتهيت من بناء قاربي جف البحر”",
  "“أنت دائما تخشى ما لا تفهمه”",
  "“أعتقد أن ما لا يقتلك ببساطة يجعلك... شخصا غريب”",
  "“بعض الرجال يريدون فقط مشاهدة العالم يحترق”",
  "“أنت تعتقد أن الظلام هو حليفك ، لكنك تبنت الظلام. انا لقد ولدت في”",
  "“إما أن تموت بطلا أو تعيش طويلا بما يكفي لترى نفسك تصبح الشرير”"
]' | convertfrom-json
  
$sync.configs.tweaks = '[
  {
    "name": "Fix stutter in games",
    "description": "Fix Stutter in Games (Disable GameBarPresenceWriter). Windows 10/11",
    "website": "https://github.com/emadadel4/Fix-Stutter-in-Games",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/Fix-Stutter-in-Games/main/fix.ps1 | Invoke-Expression",
    "fromUrl": "true",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Disk Cleanup",
    "description": "Clean temporary files that are not necessary",
    "website": "#",
    "script": "cleanmgr.exe /d C: /VERYLOWDISK Dism.exe /online /Cleanup-Image /StartComponentCleanup /ResetBase",
    "fromUrl": "false",
    "check": "true",
    "category": "tweak"
  }
]' | convertfrom-json
  
$inputXML =  '
<!--Window-->
    <Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Name="Window" Title="ITT @emadadel4" WindowStartupLocation = "CenterScreen" 
        Background="{DynamicResource primary}"
        Height="600" Width="955" MinWidth="677" MinHeight="400" ShowInTaskbar = "True" Topmost="True" Icon="https://raw.githubusercontent.com/emadadel4/ITT/main/icon.ico">

    
        <Window.Resources>

             <!--Scrollbar Thumbs-->
 <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
     <Setter Property="Template">
         <Setter.Value>
             <ControlTemplate TargetType="{x:Type Thumb}">
                 <Grid x:Name="Grid">
                     <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                     <Border x:Name="Rectangle1" CornerRadius="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{TemplateBinding Background}" />
                 </Grid>
                 <ControlTemplate.Triggers>
                     <Trigger Property="Tag" Value="Horizontal">
                         <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                         <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                     </Trigger>
                 </ControlTemplate.Triggers>
             </ControlTemplate>
         </Setter.Value>
     </Setter>
 </Style>
 <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
     <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
     <Setter Property="Foreground" Value="WhiteSmoke" />
     <Setter Property="Background" Value="Transparent" />
     <Setter Property="Width" Value="8" />
     <Setter Property="Template">
         <Setter.Value>
             <ControlTemplate TargetType="{x:Type ScrollBar}">
                 <Grid x:Name="GridRoot" Width="8" Background="{TemplateBinding Background}">
                     <Grid.RowDefinitions>
                         <RowDefinition Height="0.00001*" />
                     </Grid.RowDefinitions>
                     <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                         <Track.Thumb>
                             <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                         </Track.Thumb>
                         <Track.IncreaseRepeatButton>
                             <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                         </Track.IncreaseRepeatButton>
                         <Track.DecreaseRepeatButton>
                             <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                         </Track.DecreaseRepeatButton>
                     </Track>
                 </Grid>
                 <ControlTemplate.Triggers>
                     <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                         <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                     </Trigger>
                     <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                         <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                     </Trigger>
                     <Trigger Property="IsEnabled" Value="false">
                         <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                     </Trigger>
                     <Trigger Property="Orientation" Value="Horizontal">
                         <Setter TargetName="GridRoot" Property="LayoutTransform">
                             <Setter.Value>
                                 <RotateTransform Angle="-90" />
                             </Setter.Value>
                         </Setter>
                         <Setter TargetName="PART_Track" Property="LayoutTransform">
                             <Setter.Value>
                                 <RotateTransform Angle="-90" />
                             </Setter.Value>
                         </Setter>
                         <Setter Property="Width" Value="Auto" />
                         <Setter Property="Height" Value="8" />
                         <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                         <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                         <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                     </Trigger>
                 </ControlTemplate.Triggers>
             </ControlTemplate>
         </Setter.Value>
     </Setter>
 </Style>
 <!--End Scrollbar Thumbs-->

            <!--Button Style-->
                <Style TargetType="Button">
                    <Setter Property="Background" Value="{DynamicResource button}"/>
                    <Setter Property="Foreground" Value="White"/>

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border CornerRadius="0" Background="{TemplateBinding Background}">
                                    <ContentPresenter HorizontalAlignment="Center"
                                                        VerticalAlignment="Center"/>
                                    
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#2F58CD"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            <!--End Button Style-->

            <!--Light Theme-->
        <SolidColorBrush Color="White" x:Key="primary"/>
        <SolidColorBrush Color="WhiteSmoke" x:Key="secondary"/>
        <SolidColorBrush Color="DarkGray" x:Key="PlaceHolder"/>
        <SolidColorBrush Color="#FF0090FF" x:Key="button"/>
        <SolidColorBrush Color="White" x:Key="BtnForeground"/>
        <SolidColorBrush Color="Black" x:Key="label"/>
        <SolidColorBrush Color="#FF0090FF" x:Key="link"/>
        <SolidColorBrush Color="WhiteSmoke" x:Key="BorderBrush"/>

        

        </Window.Resources>

    <Grid>
     
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="222"/>
        </Grid.ColumnDefinitions>


        <!--Logo-->
            <StackPanel Margin="20" Orientation="Horizontal"  VerticalAlignment="Center" Grid.Row="0" Grid.ColumnSpan="2" >

                <Ellipse Name="about" Width="80" Height="80">
                    <Ellipse.Fill>
                        <ImageBrush ImageSource="https://avatars.githubusercontent.com/u/19177373?v=4.png" />
                    </Ellipse.Fill>
                </Ellipse>
        <!--End Logo-->

        <!--Catagory Section-->
                <StackPanel Name="catg" Margin="20,0,0,0" Orientation="Horizontal" HorizontalAlignment="Left">
                <Button Name="all" Cursor="Hand"  Content="All" Height="20" Width="60" Margin="4"  Background="{DynamicResource button}" Foreground="{DynamicResource BtnForeground}"/>
                <Button Name="r" Cursor="Hand" Content="Fresh Start" Height="20" Width="100" Margin="4"  Background="{DynamicResource button}" Foreground="{DynamicResource BtnForeground}"/>
                <Button Name="m" Cursor="Hand"  Content="Media" Height="20" Width="60" Margin="4"  Background="{DynamicResource button}" Foreground="{DynamicResource BtnForeground}"/>
                <Button Name="b" Cursor="Hand"  Content="Browsers" Height="20" Width="60" Margin="4"  Background="{DynamicResource button}" Foreground="{DynamicResource BtnForeground}"/>
                <Button Name="g" Cursor="Hand"  Content="Gaming" Height="20" Width="60" Margin="4"  Background="{DynamicResource button}" Foreground="{DynamicResource BtnForeground}"/>
                <Button Name="d" Cursor="Hand"  Content="Developer" Height="20" Width="70" Margin="4"  Background="{DynamicResource button}" Foreground="{DynamicResource BtnForeground}"/>
                <Button Name="u" Cursor="Hand"  Content="Utilities" Height="20" Width="60" Margin="4"  Background="{DynamicResource button}" Foreground="{DynamicResource BtnForeground}"/>
                <Button Name="c" Cursor="Hand" Content="Communication" Height="20" Width="100" Margin="4"  Background="{DynamicResource button}" Foreground="{DynamicResource BtnForeground}"/>
                </StackPanel>
            </StackPanel>
        <!--End Catagory Section-->

        <!--TabControl-->
            <TabControl x:Name="taps" TabStripPlacement="Left" Margin="0, 10, 0, 10" Grid.Row="1" BorderBrush="{DynamicResource BorderBrush}" Foreground="White" Background="Transparent">
                <TabControl.Resources>


                    <Style TargetType="TabItem">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="TabItem">
                                    <Border Name="Border" CornerRadius="0" BorderThickness="0,0,0,0" Padding="5" BorderBrush="Gainsboro"  Margin="10,5">
                                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource button}" />
                                            <Setter Property="Foreground" Value="White" />

                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="False">
                                            <Setter TargetName="Border" Property="Background" Value="WhiteSmoke" />
                                            <Setter Property="Foreground" Value="Black" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TabControl.Resources>
                <TabItem Header="Apps" Name="apps" BorderBrush="{x:Null}" Padding="16">
                    <TabItem.Content>
                        <ListView Margin="10" ScrollViewer.VerticalScrollBarVisibility="Auto" x:Name="list" BorderBrush="{x:Null}" Background="{x:Null}">
                        </ListView>
                    </TabItem.Content>
                </TabItem>
                <TabItem Header="Tweaks" x:Name="tweeks" Padding="16" BorderBrush="{x:Null}" Background="{x:Null}">
                    <TabItem.Content>
                        <ListView Name="tweaks"  Margin="10" ScrollViewer.VerticalScrollBarVisibility="Auto" BorderBrush="{x:Null}" Background="{x:Null}">
                        </ListView>
                    </TabItem.Content>
                </TabItem>
            </TabControl>
        <!--End TabControl-->

        <!--Main Section-->
            <Grid  Grid.Row="1" Grid.Column="1"  Grid.RowSpan="2" Margin="0">
                <StackPanel Margin="15" Orientation="Vertical">


                    <StackPanel Orientation="Horizontal" Margin="0" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Grid>

                        <TextBox Padding="5" BorderBrush="{x:Null}" Width="166"  VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0" Text="{Binding Text_searchInput}"  x:Name="searchInput" SelectionBrush="{x:Null}" Background="{DynamicResource secondary}"/>

                        <TextBlock IsHitTestVisible="False" Text="Search in list" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="16,0,0,0" Foreground="{DynamicResource PlaceHolder}">

                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Text, ElementName=searchInput}" Value="">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </StackPanel>





                    <TextBlock Name="description" Margin="15"  Text="" TextWrapping="Wrap" Foreground="{DynamicResource text}"/>
                    <TextBlock Name="itemLink" Margin="15"  Foreground="{DynamicResource link}" Visibility="Hidden" TextWrapping="Wrap" Text="" Cursor="Hand"/>
                </StackPanel>

                <!--Install Button-->
                    <Button
                        Name="installBtn"
                        Content="Install &#x2714;"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Bottom"
                        Cursor="Hand"
                        Width="90" Height="33" Margin="50"/>
                <!--End Install Button-->

                <!--Apply Button-->
                    <Button
                        Name="applyBtn"
                        Content="Apply"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Bottom"
                        Cursor="Hand"
                        Visibility="Hidden"
                        Width="90" Height="33" Margin="50"/>
                <!--End Apply Button-->

            </Grid>
        <!--End Main Section-->

        <!--Footer Section-->
            <Grid Grid.Row="2">
                <TextBlock Name="quotes"
                HorizontalAlignment="Left"
                VerticalAlignment="Center" 
                Padding="16" TextWrapping="Wrap" 
                Text="عندما إنتهيت من بناء قاربي جف البحر"
                Foreground="{DynamicResource label}"
                />
            </Grid>
        <!--End Footer Section-->

    </Grid>

        
    </Window>
<!--End Window-->

'
#===========================================================================
# Load XMAL 
#===========================================================================

#region Load XMAL
# Set the maximum number of threads for the RunspacePool to the number of threads on the machine
$maxthreads = [int]$env:NUMBER_OF_PROCESSORS

# Create a new session state for parsing variables into our runspace
$hashVars = New-object System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList 'sync',$sync,$Null
$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()

# Add the variable to the session state
$InitialSessionState.Variables.Add($hashVars)

# Create the runspace pool
$sync.runspace = [runspacefactory]::CreateRunspacePool(
    1,                      # Minimum thread count
    $maxthreads,            # Maximum thread count
    $InitialSessionState,   # Initial session state
    $Host                   # Machine to create runspaces on
)

# Open the RunspacePool instance
$sync.runspace.Open()

[xml]$XAML = $inputXML

$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$window = [Windows.Markup.XamlReader]::Load($reader)

# Read the XAML file
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
try
{ 
    $window = [Windows.Markup.XamlReader]::Load($reader)
}
catch [System.Management.Automation.MethodInvocationException] {
   
    Write-Host "error"
}
#endregion
#===========================================================================
# End Load XMAL 
#===========================================================================

#===========================================================================
# Loops 
#===========================================================================

    #region Generate items from json file
    $list = $Window.FindName("list")
    foreach ($item in $sync.configs.applications)
    {
        $checkbox = New-Object System.Windows.Controls.CheckBox
        $list.Items.Add($checkbox)
        $checkbox.Content = $item.name
    }

    # Get Discription of selected item in $list
    $list.Add_SelectionChanged({
            
        $Window.FindName('itemLink').Visibility = "Visible"

        foreach($data in $sync.configs.applications)
        {

            if($list.SelectedItem.Content -eq $data.name)
            {
                $Window.FindName('itemLink').Text  = "What is " + $data.name + " ?"
                # $Window.FindName("description").Text = $data.description
            }
        }
    })

    # Get Selected item Website link from json file
    $Window.FindName('itemLink').add_MouseLeftButtonDown({

        foreach ($item in $list.SelectedItem.Content)
        {
            foreach ($data in $sync.configs.applications)
            {
                if($item -eq $data.name)
                {
                    Start-Process ("https://duckduckgo.com/?hps=1&q=%5C" + $data.name)
                }
            }
        }

    })
    #endregion
    
    #region Generate tweaks from json file

    $sync.tweaks = $Window.FindName("tweaks")
    foreach ($item in $sync.configs.tweaks)
    {
        $checkbox = New-Object System.Windows.Controls.CheckBox
        $sync.tweaks.Items.Add($checkbox)
        $checkbox.Content = $item.name
    }

    # Get Discription of selected tweaks in $list
    $sync.tweaks.Add_SelectionChanged({
            
        foreach($data in $sync.configs.tweaks)
        {
            if($sync.tweaks.SelectedItem.Content -eq $data.name)
            {
                $discription.Text = $data.description

            }
        }
    })

    #endregion

# Load the JSON content from file
$jsonContent = $sync.configs.quotes

    # Check if the JSON content is an array
if ($jsonContent -is [array])
{
    # Select a random index
    $randomIndex = Get-Random -Minimum 0 -Maximum ($jsonContent.Count)

    # Get the random text
    $randomText = $jsonContent[$randomIndex]

    # Output the random text
    $Window.FindName('quotes').Text = "$($randomText)"

}

#===========================================================================
# End Loops 
#===========================================================================

#Install Choco
CheckChoco
    

#===========================================================================
# Events 
#===========================================================================


# Buttons
$window.FindName('taps').add_SelectionChanged({ChangeTap})
$window.FindName('installBtn').add_click({Invoke-Install})
$window.FindName('applyBtn').add_click({ApplyTweaks})
$window.FindName('searchInput').add_TextChanged({Search})
$window.FindName('about').add_MouseLeftButtonDown({About})

# Catgoray bar buttons
$window.FindName('b').add_click({Catgoray($window.FindName('b').Content)})
$window.FindName('m').add_click({Catgoray($window.FindName('m').Content)})
$window.FindName('d').add_click({Catgoray($window.FindName('d').Content)})
$window.FindName('g').add_click({Catgoray($window.FindName('g').Content)})
$window.FindName('u').add_click({Catgoray($window.FindName('u').Content)})
$window.FindName('c').add_click({Catgoray($window.FindName('c').Content)})
$window.FindName('r').add_click({Recommended($window.FindName('r').Content)})
$window.FindName('all').add_click({ShowAll})

#===========================================================================
# End Events 
#===========================================================================



$window.ShowDialog() | out-null
