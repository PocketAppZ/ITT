
################################################################################################################
###                                                                                                          ###
###  This file is automatically generated                                                                    ###
###                                                                                                          ###
################################################################################################################


<#
.Dev
    Author         : Emad Adel @emadadel4
    GitHub         : https://github.com/emadadel4
    Website        : https://eprojects.orgfree.com/
    Version        : 24.04.17
#>

if (!(Test-Path -Path $ENV:TEMP)) {
    New-Item -ItemType Directory -Force -Path $ENV:TEMP
}

# Load DLLs
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Windows.Forms

# Variable to sync between runspaces
$sync = [Hashtable]::Synchronized(@{})
$sync.PSScriptRoot = $PSScriptRoot
$sync.version = "24.04.17"
$sync.github = "https://github.com/emadadel4"
$sync.website = "https://eprojects.orgfree.com"
$sync.author = "Emad Adel @emadadel4"

$sync.configs = @{}
$sync.ProcessRunning = $false

$currentPid = [System.Security.Principal.WindowsIdentity]::GetCurrent()
$principal = new-object System.Security.Principal.WindowsPrincipal($currentPid)
$adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator



if ($principal.IsInRole($adminRole))
{
    $Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + "(Admin)"
    clear-host
}
else
{
    $newProcess = new-object System.Diagnostics.ProcessStartInfo "PowerShell";
    $newProcess.Arguments = $myInvocation.MyCommand.Definition;
    $newProcess.Verb = "runas";
    [System.Diagnostics.Process]::Start($newProcess);
    break
}
#===========================================================================
# Start functions
#===========================================================================
function About{

    $authorInfo = @"
        Author   : $($sync.author)
        GitHub   : $($sync.github)
        Website  : $($sync.website)
        Version  : $($sync.version)
"@

    Show-CustomDialog -Message $authorInfo -Width 400 
}
function Test-InternetConnection {
    try {
        $ping = New-Object System.Net.NetworkInformation.Ping
        $response = $ping.Send("www.google.com")
        if ($response.Status -eq "Success") {
            return $true
        } else {
            return $false
        }
    } catch {
        return $false
    }
}
function Catgoray($cat){

    $window.FindName('apps').IsSelected = $true 

    <#
    .DESCRIPTION
    This function filters and populates a list of applications based on the specified category.

    .PARAMETER cat
    The category based on which the applications are filtered.

    .EXAMPLE
    Catgoray -cat "SomeCategory"

    .EXAMPLE
    ShowAll "Show all apps"
    #>

    $list.Items.Clear()

    foreach ($item in $sync.configs.applications)
    {
        if($item.catgory -eq $cat)
        {
            $checkbox = New-Object System.Windows.Controls.CheckBox
            $list.Items.Add($checkbox)
            $checkbox.Content = $item.name
            $checkbox.Foreground = "White"
        }
    }
}

function ShowAll{

    $window.FindName('apps').IsSelected = $true 

    $list.Items.Clear()

    foreach ($item in $sync.configs.applications)
    {
        $checkbox = New-Object System.Windows.Controls.CheckBox
        $list.Items.Add($checkbox)
        $checkbox.Content = $item.name
        $checkbox.Foreground = "White"
    }
}

function Recommended() {

    $window.FindName('apps').IsSelected = $true 

    #Clear Listview
    
    $list.Items.Clear()

    # get items that has check = true in json file
    foreach ($item in $sync.configs.applications)
    {
        # $item.check = true
        if($item.check -eq 'true')
        {
            $checkbox = New-Object System.Windows.Controls.CheckBox
            $list.Items.Add($checkbox)
            $checkbox.Content = $item.name
            $checkbox.Foreground = "White"
        }
    }
}

function CheckChoco 
{

    try {

    if((Get-Command -Name choco -ErrorAction Ignore))
    {
    Write-Host 
    "
    ___ _____ _____     ____  _____ __  __    _    ____       _    ____  _____ _     
    |_ _|_   _|_   _|   / __ \| ____|  \/  |  / \  |  _ \     / \  |  _ \| ____| |    
    | |  | |   | |    / / _` |  _| | |\/| | / _ \ | | | |   / _ \ | | | |  _| | |    
    | |  | |   | |   | | (_| | |___| |  | |/ ___ \| |_| |  / ___ \| |_| | |___| |___ 
    |___| |_|   |_|    \ \__,_|_____|_|  |_/_/   \_\____/  /_/   \_\____/|_____|_____|
                        \____/                                                        

                    This is Emad adel an Binary
    01000101 01001101 01000001 01000100  01000001 01000100 01000101 01001100      
                Chocolatey is installed You Good to go                  
    "
        return
        }

        Write-Host "Chocolatey is not installed, installing now"
        Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) -ErrorAction Stop
        powershell choco feature enable -n allowGlobalConfirmation
    }
    Catch {
        Write-Host "--Chocolatey failed to install---"
    }
}


function Get-SelectedApps {

    $items = @()

    foreach ($item in $list.Items)
    {
        if ($item.IsChecked)
        {
            foreach ($program in $sync.configs.applications)
            {

                if($item.Content -eq $program.name)
                {
                    $items += $program.choco
                }
            }
        }
    }

    return $items 
}

function Get-SelectedTweeaks {

    $items = @()

    foreach ($item in $sync.tweaks.Items)
    {
        if ($item.IsChecked)
        {
            foreach ($tweeak in $sync.configs.tweaks)
            {

                if($item.Content -eq $tweeak.name)
                {
                    $items += $tweeak.script
                }
            }
        }
    }

    return $items 
}

function Invoke-Install() {

    # Check internet connection
    if (Test-InternetConnection) {
        Write-Host "Internet is available you good"
    } else {
        [System.Windows.MessageBox]::Show("Internet is not available.", "ITT", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    if($sync.ProcessRunning)
    {
        $msg = "An Install process is currently running."
        [System.Windows.MessageBox]::Show($msg, "ITT", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
  
    $choco = Get-SelectedApps

    if(Get-SelectedApps -ne $null)
    {
        Invoke-RunspaceWithScriptBlock -ArgumentList  $choco -ScriptBlock {

            param($choco)
            
            try{

                $msg = [System.Windows.MessageBox]::Show("Do you want to Install selected programs?", "ITT @emadadel", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Question)

                if($msg -eq "Yes")
                {
                    $sync.ProcessRunning = $true

                    Write-Host "Installing the following programs $choco "
                    Start-Process -FilePath "choco" -ArgumentList "install $choco -y --force --ignore-checksums" -NoNewWindow -Wait
                    Write-Host "Installs have finished"
                    [System.Windows.MessageBox]::Show("Installs have finished", "ITT @emadadel4", "OK", "Information")
                }
            }
            Catch
            {
                Write-Host "Error: $_"
            }

            Start-Sleep -Seconds 1
            $sync.ProcessRunning = $False
        }
    }
    else
    {
        [System.Windows.MessageBox]::Show("Select at lest one program", "ITT @emadadel", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Question)
    }
}


function ApplyTweaks() {


    # Check internet connection
    if (Test-InternetConnection) {
        Write-Host "Internet is available you good"
    } else {
        [System.Windows.MessageBox]::Show("Internet is not available.", "ITT", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }

    if($sync.ProcessRunning)
    {
        $msg = "An Install process is currently running."
        [System.Windows.MessageBox]::Show($msg, "ITT", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Warning)
        return
    }
  
    $tweeaks = Get-SelectedTweeaks

    if(Get-SelectedTweeaks -ne $null)
    {
        Invoke-RunspaceWithScriptBlock -ArgumentList  $tweeaks -ScriptBlock {

            param($tweeaks)
            
            try{

                $msg = [System.Windows.MessageBox]::Show("Do you want to apply selected tweeak(s) ?", "ITT @emadadel", [System.Windows.MessageBoxButton]::YesNo, [System.Windows.MessageBoxImage]::Question)

                if($msg -eq "Yes")
                {
                    $sync.ProcessRunning = $true
                    Write-Host "Applying tweeak(s) $tweeaks "
                    Start-Process -FilePath "powershell.exe" -ArgumentList "-Command `"$tweeaks`"" -NoNewWindow -Wait
                    Write-Host "The operation was successful."    
                    [System.Windows.MessageBox]::Show("The operation was successful.", "ITT @emadadel4", "OK", "Information")
                }
            }
            Catch
            {
                Write-Host "Error: $_"
            }

            Start-Sleep -Seconds 1
            $sync.ProcessRunning = $False
        }
    }
    else
    {
        [System.Windows.MessageBox]::Show("Choose at least something from the list", "ITT @emadadel", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Question)
    }
}
function Invoke-RunspaceWithScriptBlock {
    param(
        [scriptblock]$ScriptBlock,
        [array]$ArgumentList
    )

        $script:powershell = [powershell]::Create()

        # Add Scriptblock and Arguments to runspace
        $script:powershell.AddScript($ScriptBlock)
        $script:powershell.AddArgument($ArgumentList)
        $script:powershell.RunspacePool = $sync.runspace

        $script:handle = $script:powershell.BeginInvoke()

        if ($script:handle.IsCompleted)
        {
            $script:powershell.EndInvoke($script:handle)
            $script:powershell.Dispose()
            $sync.runspace.Dispose()
            $sync.runspace.Close()

            [System.GC]::Collect()
        }
}
#region Function to filter a list based on a search input

function Search{
    
    # Retrieves the search input, converts it to lowercase, and filters the list based on the input
    $filter = $window.FindName('searchInput').Text.ToLower()
    $collectionView = [System.Windows.Data.CollectionViewSource]::GetDefaultView($list.Items)
    $collectionView.Filter = {
        param($item)
        $item -like "*$filter*"
    }

}
#endregion


# Show Custom Msg
function Show-CustomDialog {
    
    param(
        [string]$Message,
        [int]$Width = 300,
        [int]$Height = 200
    )

    Add-Type -AssemblyName PresentationFramework

    # Define theme colors
    $foregroundColor = [Windows.Media.Brushes]::Black
    $backgroundColor = [Windows.Media.Brushes]::White
    $font = New-Object Windows.Media.FontFamily("Consolas")
    $borderColor = [Windows.Media.Brushes]::Black
    $buttonBackgroundColor = [Windows.Media.Brushes]::Black
    $buttonForegroundColor = [Windows.Media.Brushes]::White
    $shadowColor = [Windows.Media.ColorConverter]::ConvertFromString("#AAAAAAAA")

    # Create a custom dialog window
    $dialog = New-Object Windows.Window
    $dialog.Title = "About"
    $dialog.Height = $Height
    $dialog.Width = $Width
    $dialog.Margin = New-Object Windows.Thickness(10)  # Add margin to the entire dialog box
    $dialog.WindowStyle = [Windows.WindowStyle]::None  # Remove title bar and window controls
    $dialog.ResizeMode = [Windows.ResizeMode]::NoResize  # Disable resizing
    $dialog.WindowStartupLocation = [Windows.WindowStartupLocation]::CenterScreen  # Center the window
    $dialog.Foreground = $foregroundColor
    $dialog.Background = $backgroundColor
    $dialog.FontFamily = $font

    # Create a Border for the green edge with rounded corners
    $border = New-Object Windows.Controls.Border
    $border.BorderBrush = $borderColor
    $border.BorderThickness = New-Object Windows.Thickness(1)  # Adjust border thickness as needed
    $border.CornerRadius = New-Object Windows.CornerRadius(0)  # Adjust the radius for rounded corners

    # Create a drop shadow effect
    $dropShadow = New-Object Windows.Media.Effects.DropShadowEffect
    $dropShadow.Color = $shadowColor
    $dropShadow.Direction = 270
    $dropShadow.ShadowDepth = 5
    $dropShadow.BlurRadius = 0

    # Apply drop shadow effect to the border
    $dialog.Effect = $dropShadow

    $dialog.Content = $border

    # Create a grid for layout inside the Border
    $grid = New-Object Windows.Controls.Grid
    $border.Child = $grid

    # Add the following line to show gridlines
    #$grid.ShowGridLines = $true

    # Add the following line to set the background color of the grid
    $grid.Background = [Windows.Media.Brushes]::Transparent
    # Add the following line to make the Grid stretch
    $grid.HorizontalAlignment = [Windows.HorizontalAlignment]::Stretch
    $grid.VerticalAlignment = [Windows.VerticalAlignment]::Stretch

    # Add the following line to make the Border stretch
    $border.HorizontalAlignment = [Windows.HorizontalAlignment]::Stretch
    $border.VerticalAlignment = [Windows.VerticalAlignment]::Stretch


    # Set up Row Definitions
    $row0 = New-Object Windows.Controls.RowDefinition
    $row0.Height = [Windows.GridLength]::Auto

    $row1 = New-Object Windows.Controls.RowDefinition
    $row1.Height = [Windows.GridLength]::new(1, [Windows.GridUnitType]::Star)

    $row2 = New-Object Windows.Controls.RowDefinition
    $row2.Height = [Windows.GridLength]::Auto

    # Add Row Definitions to Grid
    $grid.RowDefinitions.Add($row0)
    $grid.RowDefinitions.Add($row1)
    $grid.RowDefinitions.Add($row2)
        
    # Add StackPanel for horizontal layout with margins
    $stackPanel = New-Object Windows.Controls.StackPanel
    $stackPanel.Margin = New-Object Windows.Thickness(10)  # Add margins around the stack panel
    $stackPanel.Orientation = [Windows.Controls.Orientation]::Horizontal
    $stackPanel.HorizontalAlignment = [Windows.HorizontalAlignment]::Left  # Align to the left
    $stackPanel.VerticalAlignment = [Windows.VerticalAlignment]::Top  # Align to the top

    $grid.Children.Add($stackPanel)
    [Windows.Controls.Grid]::SetRow($stackPanel, 0)  # Set the row to the second row (0-based index)

    $viewbox = New-Object Windows.Controls.Viewbox
    $viewbox.Width = 25
    $viewbox.Height = 25
    

    # Add "Winutil" text
    $IttTextBlock = New-Object Windows.Controls.TextBlock
    $IttTextBlock.Text = "ITT"
    $IttTextBlock.FontSize = 18  # Adjust font size as needed
    $IttTextBlock.Foreground = $foregroundColor
    $IttTextBlock.Margin = New-Object Windows.Thickness(10, 5, 10, 5)  # Add margins around the text block
    $stackPanel.Children.Add($IttTextBlock)

    # Add TextBlock for information with text wrapping and margins
    $messageTextBlock = New-Object Windows.Controls.TextBlock
    $messageTextBlock.Text = $Message
    $messageTextBlock.TextWrapping = [Windows.TextWrapping]::Wrap  # Enable text wrapping
    $messageTextBlock.HorizontalAlignment = [Windows.HorizontalAlignment]::Left
    $messageTextBlock.VerticalAlignment = [Windows.VerticalAlignment]::Top
    $messageTextBlock.Margin = New-Object Windows.Thickness(10)  # Add margins around the text block
    $grid.Children.Add($messageTextBlock)
    [Windows.Controls.Grid]::SetRow($messageTextBlock, 1)  # Set the row to the second row (0-based index)

    # Add OK button
    $okButton = New-Object Windows.Controls.Button
    $okButton.Content = "OK"
    $okButton.Width = 80
    $okButton.Height = 30
    $okButton.HorizontalAlignment = [Windows.HorizontalAlignment]::Center
    $okButton.VerticalAlignment = [Windows.VerticalAlignment]::Bottom
    $okButton.Margin = New-Object Windows.Thickness(0, 0, 0, 10)
    $okButton.Background = $buttonBackgroundColor
    $okButton.Foreground = $buttonForegroundColor
    $okButton.BorderBrush = $borderColor

    $okButton.Add_Click({
        $dialog.Close()
    })
    $grid.Children.Add($okButton)
    [Windows.Controls.Grid]::SetRow($okButton, 2)  # Set the row to the third row (0-based index)

    # Handle Escape key press to close the dialog
    $dialog.Add_KeyDown({
        if ($_.Key -eq 'Escape') {
            $dialog.Close()
        }
    })

    # Set the OK button as the default button (activated on Enter)
    $okButton.IsDefault = $true

    # Show the custom dialog
    $dialog.ShowDialog()
}

function ChangeTap() {
    
    if($window.FindName('apps').IsSelected)
    {
        $window.FindName('installBtn').Visibility = "Visible"
        $window.FindName('applyBtn').Visibility = "Hidden"
        $Window.FindName('description').Text =  ""
        $Window.FindName('itemLink').Visibility = "Visible"
    }

    if($window.FindName('tweeks').IsSelected)
    {
        $window.FindName('applyBtn').Visibility = "Visible"
        $window.FindName('installBtn').Visibility = "Hidden"
        $Window.FindName('itemLink').Visibility = "Hidden"
    }
}
$sync.configs.applications = '[
  {
    "Name": "Thorium",
    "winget": "Alex313031.Thorium",
    "choco": "thorium",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Firefox",
    "winget": "Mozilla.Firefox",
    "choco": "firefox",
    "catgory": "Browsers",
    "check": "true"
  },
  {
    "Name": "Add block extension [Firefox]",
    "winget": "#",
    "choco": "adblockplusfirefox",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Microsoft Edge",
    "winget": "Microsoft.Edge",
    "choco": "microsoft-edge",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Google Chrome",
    "winget": "Google.Chrome",
    "choco": "googlechrome",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "uBlock Origin extension [Chrome]",
    "winget": "#",
    "choco": "ublockorigin-chrome",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Chromium",
    "winget": "eloston.ungoogled-chromium",
    "choco": "chromium",
    "catgory": "Browsers",
    "check": "false"
  },
  {
    "Name": "Brave",
    "winget": "Brave.Brave",
    "choco": "brave",
    "catgory": "Brave.Brave",
    "check": "false"
  },
  {
    "Name": "Tor Browser",
    "winget": "TorProject.TorBrowser",
    "choco": "tor-browser",
    "catgory": "Brave.Brave",
    "check": "false"
  },
  {
    "Name": "Internet Download Manager",
    "winget": "Tonec.InternetDownloadManager",
    "choco": "internet-download-manager",
    "catgory": "Browsers",
    "check": "true"
  },
  {
    "Name": "K-Lite Mega Codec Pack",
    "winget": "CodecGuide.K-LiteCodecPack.Mega",
    "choco": "k-litecodecpackfull",
    "catgory": "Media",
    "check": "true"
  },
  {
    "Name": "PotPlayer",
    "winget": "Daum.PotPlayer",
    "choco": "potplayer",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "VLC",
    "winget": "VideoLAN.VLC",
    "choco": "vlc.install",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Kodi",
    "winget": "#",
    "choco": "kodi",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Jellyfin",
    "winget": "#",
    "choco": "jellyfin",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Winamp",
    "winget": "#",
    "choco": "winamp",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Aimp",
    "winget": "#",
    "choco": "aimp",
    "catgory": "Media",
    "check": "false"
  },

  {
    "Name": "OpenOffice",
    "winget": "Apache.OpenOffice",
    "choco": "openoffice",
    "catgory": "Documents",
    "check": "false"
  },
  {
    "Name": "FoxitReader",
    "winget": "Foxit.FoxitReader",
    "choco": "foxitreader",
    "catgory": "Documents",
    "check": "false"
  },
  {
    "Name": "LibreOffice",
    "winget": "TheDocumentFoundation.LibreOffice",
    "choco": "libreoffice-fresh",
    "catgory": "Documents",
    "check": "false"
  },
  {
    "Name": "SumatraPDF",
    "winget": "SumatraPDF.SumatraPDF",
    "choco": "sumatrapdf.install",
    "catgory": "Documents",
    "check": "false"
  },
  {
    "Name": "WinRAR",
    "winget": "RARLab.WinRAR",
    "choco": "winrar",
    "catgory": "Compression",
    "check": "false"
  },
  {
    "Name": "7-Zip",
    "winget": "7zip.7zip",
    "choco": "7zip",
    "catgory": "Compression",
    "check": "false"
  },
  {
    "Name": "QQPlayer",
    "winget": "Tencent.QQPlayer",
    "choco": "Tencent.QQPlayer",
    "catgory": "Media",
    "check": "false"
  },
  {
    "Name": "Telegram Desktop",
    "winget": "Telegram.TelegramDesktop",
    "choco": "telegram",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "Meta Messenger",
    "winget": "WhatsApp.WhatsApp",
    "choco": "messenger",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "Skype",
    "winget": "Microsoft.Skype",
    "choco": "skype",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "Zoom",
    "winget": " Zoom.Zoom",
    "choco": "zoom",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "Microsoft Teams",
    "winget": "Microsoft.Teams",
    "choco": "microsoft-teams.install",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "Discord",
    "winget": "Discord.Discord",
    "choco": "discord",
    "catgory": "Communication",
    "check": "false"
  },
  {
    "Name": "TeamViewer",
    "winget": "TeamViewer.TeamViewer",
    "choco": "teamviewer",
    "catgory": "File Sharing",
    "check": "false"
  },
  {
    "Name": "HiSuite",
    "winget": "Huawei.HiSuite",
    "choco": "Huawei.HiSuite",
    "catgory": "File Sharing",
    "check": "false"
  },
  {
    "Name": "GIMP",
    "winget": "GIMP.GIMP",
    "choco": "gimp",
    "catgory": "Imaging",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2005 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2005.x86",
    "choco": "vcredist2005",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2005 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2005.x64",
    "choco": "vcredist2005",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2008 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2008.x86",
    "choco": "vcredist2008",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2008 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2008.x64",
    "choco": "vcredist2008",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2010 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2010.x86",
    "choco": "vcredist2010",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2010 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2010.x64",
    "choco": "vcredist2010",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2012 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2012.x86",
    "choco": "vcredist2012",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2012 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2012.x64",
    "choco": "vcredist2012",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2013 (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2013.x86",
    "choco": "vcredist2013",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2013 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2013.x64",
    "choco": "vcredist2013",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2015-2022 (x64) Redistributable",
    "winget": "Microsoft.VCRedist.2015+.x64",
    "choco": "vcredist2015",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual C++ 2015-2022  (x86) Redistributable",
    "winget": "Microsoft.VCRedist.2015+.x86",
    "choco": "vcredist2015",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "NET Framework All Versions",
    "winget": "#",
    "choco": "dotnet-all",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "NVIDIA GeForce NOW",
    "winget": "Nvidia.GeForceNow",
    "choco": "nvidia-geforce-now",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "NVIDIA PhysX",
    "winget": "Nvidia.PhysX",
    "choco": "physx.legacy",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Steam",
    "winget": "Valve.Steam",
    "choco": "steam",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Ubisoft Connect",
    "winget": "Ubisoft.Connect",
    "choco": "ubisoft-connect",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "GameSave Manager",
    "winget": "InsaneMatt.GameSaveManager",
    "choco": "gamesavemanager",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "StreamlabsOBS",
    "winget": "Streamlabs.StreamlabsOBS",
    "choco": "streamlabs-obs",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "OBS Studio",
    "winget": " OBSProject.OBSStudio",
    "choco": "obs-studio.install",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Lively Wallpaper ",
    "winget": " #",
    "choco": "lively",
    "catgory": "Gaming",
    "check": "false"
  },
  {
    "Name": "Driver Easy",
    "winget": "Easeware.DriverEasy",
    "choco": "drivereasyfree",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Snappy Driver Installer",
    "winget": "samlab-ws.SnappyDriverInstaller",
    "choco": "snappy-driver-installer",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "1Password",
    "winget": "AgileBits.1Password",
    "choco": "1password",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "MiniTool Partition Wizard ",
    "winget": "MiniTool.PartitionWizard.Free 12.8",
    "choco": "partitionwizard",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "AOMEI Backupper",
    "winget": "AOMEI.Backupper.Standard",
    "choco": "backupper-standard",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Recuva recover",
    "winget": "#",
    "choco": "recuva",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "CCleaner",
    "winget": "Piriform.CCleaner",
    "choco": "ccleaner",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "BCUninstaller",
    "winget": "Klocman.BulkCrapUninstaller",
    "choco": "bulk-crap-uninstaller",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "HWiNFO",
    "winget": "REALiX.HWiNFO",
    "choco": "hwinfo.install",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Speccy",
    "winget": "Piriform.Speccy",
    "choco": "speccy",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "FurMark",
    "winget": "Geeks3D.FurMark",
    "choco": "furmark",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "CPUID CPU-Z",
    "winget": "CPUID.CPU-Z",
    "choco": "cpu-z.install",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "HandBrake",
    "winget": "HandBrake.HandBrake",
    "choco": "handbrake.install",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Rufus",
    "winget": "Rufus.Rufus",
    "choco": "rufus",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Virtual CloneDrive",
    "winget": "#",
    "choco": "virtualclonedrive",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Utilso",
    "winget": "SerhiiSlieptsov.Utilso",
    "choco": "ultraiso",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Ventoy",
    "winget": "Ventoy.Ventoy",
    "choco": "ventoy",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "AutoHotkey",
    "winget": "AutoHotkey.AutoHotkey",
    "choco": "autohotkey",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "Rainmeter",
    "winget": "#",
    "choco": "rainmeter",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "FxSound",
    "winget": "FxSoundLLC.FxSound",
    "choco": "fxsound",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "AnyDesk",
    "winget": "AnyDeskSoftwareGmbH.AnyDesk",
    "choco": "anydesk.install",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "qBittorrent",
    "winget": "qBittorrent.qBittorrent",
    "choco": "qbittorrent",
    "catgory": "Utilities",
    "check": "false"
  },
  {
    "Name": "XAMPP",
    "winget": "XAMPP 8.2",
    "choco": "xampp-81",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Visual Studio Professional 2022",
    "winget": "Microsoft.VisualStudio.2022.Professional",
    "choco": "visualstudio2022professional",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Visual Studio Community 2022",
    "winget": "Microsoft.VisualStudio.2022.Community",
    "choco": "visualstudio2022community",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Godot game engine",
    "winget": "#",
    "choco": "godot",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Microsoft Visual Studio Code",
    "winget": "Microsoft.VisualStudioCode",
    "choco": "vscode",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "PyCharm Community Edition",
    "winget": "JetBrains.PyCharm.Community",
    "choco": "pycharm-community",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "PyCharm Professional Edition",
    "winget": "JetBrains.PyCharm.Professional",
    "choco": "pycharm",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Jetbrains Rider",
    "winget": "JetBrains.Rider",
    "choco": "jetbrains-rider",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Node.js LTS",
    "winget": "OpenJS.NodeJS",
    "choco": "nodejs-lts",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Electrum-LTS",
    "winget": "#",
    "choco": "electronim",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Notepad++",
    "winget": "Notepad++.Notepad++",
    "choco": "notepadplusplus",

    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Windows Terminal",
    "winget": "Microsoft.WindowsTerminal",
    "choco": "microsoft-windows-terminal",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Powershell core",
    "winget": "powershell-core",
    "choco": "powershell-core",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Python",
    "winget": "Python.Python.3.9",
    "choco": "python",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Git",
    "winget": "Git.Git",
    "choco": "git",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "GitHub Desktop",
    "winget": "GitHub.GitHubDesktop",
    "choco": "github-desktop",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Docker Desktop",
    "winget": "#",
    "choco": "docker-desktop",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "Docker Compose",
    "winget": "#",
    "choco": "docker-compose",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "PowerToys",
    "winget": "Microsoft.PowerToys",
    "choco": "powertoys",
    "catgory": "Developer",
    "check": "false"
  },
  {
    "Name": "FL Studio",
    "winget": "ImageLine.FLStudio",
    "choco": "ImageLine.FLStudio",
    "catgory": "Developer",
    "check": "false"
  }
]' | convertfrom-json
  
$sync.configs.tweaks = '[
  {
    "name": "System File Checker",
    "description": "Use the System File Checker tool to repair missing or corrupted system files",
    "website": "#",
    "script": "sfc /scannow",
    "fromUrl": "false",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Disk Cleanup",
    "description": "Clean temporary files that are not necessary",
    "website": "#",
    "script": "cleanmgr.exe /d C: /VERYLOWDISK Dism.exe /online /Cleanup-Image /StartComponentCleanup /ResetBase",
    "fromUrl": "false",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Restore All Windows Services to Default",
    "description": "If you face a problem with some system services, you can restore all services to Default.",
    "website": "#",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/WindowsTweaks/main/restore.bat | Invoke-Expression",
    "fromUrl": "false",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Remove Folder Shortcuts From Windows'' File Explorer",
    "description": "Remove Documents, Videos, Pictures, Desktop. Shortcuts from File Explorer ",
    "website": "#",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/WindowsTweaks/main/rm.ps1 | Invoke-Expression",
    "fromUrl": "false",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Fix stutter in games",
    "description": "Fix Stutter in Games (Disable GameBarPresenceWriter). Windows 10/11",
    "website": "https://github.com/emadadel4/Fix-Stutter-in-Games",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/Fix-Stutter-in-Games/main/fix.ps1 | Invoke-Expression",
    "fromUrl": "true",
    "check": "true",
    "category": "tweak"
  },
  {
    "name": "Remove Unnecessary Windows 10 Apps",
    "description": "BingNews, GetHelp, Getstarted, Messaging, Microsoft3DViewer, MicrosoftOfficeHub, MicrosoftSolitaireCollection, News, Office.Lens, Office.OneNote, Office.Sway, OneConnect, People, Print3D, RemoteDesktop, SkypeApp, StorePurchaseApp, Office.Todo.List, Whiteboard, WindowsAlarms, WindowsCamera, windowscommunicationsapps, WindowsFeedbackHub, WindowsMaps, WindowsSoundRecorder, Xbox.TCUI, XboxApp, XboxGameOverlay, XboxIdentityProvider, XboxSpeechToTextOverlay, ZuneMusic, ZuneVideo, Windows.Cortana, MSPaint",
    "website": "https://github.com/emadadel4/Fix-Stutter-in-Games",
    "script": "Invoke-RestMethod https://raw.githubusercontent.com/emadadel4/WindowsTweaks/main/debloater.ps1 | Invoke-Expression",
    "fromUrl": "true",
    "check": "true",
    "category": "tweak"
  }
]' | convertfrom-json
  
$inputXML =  '
<!--Window-->
    <Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Name="Window" Title="ITT @emadadel4" WindowStartupLocation = "CenterScreen" 
        Background="{DynamicResource primary}"
        Height="600" Width="955" MinWidth="677" MinHeight="400" ShowInTaskbar = "True" Icon="https://raw.githubusercontent.com/emadadel4/ITT/main/icon.ico">
    
        <Window.Resources>

             <!--Scrollbar Thumbs-->
 <Style x:Key="ScrollThumbs" TargetType="{x:Type Thumb}">
     <Setter Property="Template">
         <Setter.Value>
             <ControlTemplate TargetType="{x:Type Thumb}">
                 <Grid x:Name="Grid">
                     <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="Transparent" />
                     <Border x:Name="Rectangle1" CornerRadius="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{TemplateBinding Background}" />
                 </Grid>
                 <ControlTemplate.Triggers>
                     <Trigger Property="Tag" Value="Horizontal">
                         <Setter TargetName="Rectangle1" Property="Width" Value="Auto" />
                         <Setter TargetName="Rectangle1" Property="Height" Value="7" />
                     </Trigger>
                 </ControlTemplate.Triggers>
             </ControlTemplate>
         </Setter.Value>
     </Setter>
 </Style>
 <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
     <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
     <Setter Property="Foreground" Value="{DynamicResource button}" />
     <Setter Property="Background" Value="Transparent" />
     <Setter Property="Width" Value="8" />
     <Setter Property="Template">
         <Setter.Value>
             <ControlTemplate TargetType="{x:Type ScrollBar}">
                 <Grid x:Name="GridRoot" Width="8" Background="{TemplateBinding Background}">
                     <Grid.RowDefinitions>
                         <RowDefinition Height="0.00001*" />
                     </Grid.RowDefinitions>
                     <Track x:Name="PART_Track" Grid.Row="0" IsDirectionReversed="true" Focusable="false">
                         <Track.Thumb>
                             <Thumb x:Name="Thumb" Background="{TemplateBinding Foreground}" Style="{DynamicResource ScrollThumbs}" />
                         </Track.Thumb>
                         <Track.IncreaseRepeatButton>
                             <RepeatButton x:Name="PageUp" Command="ScrollBar.PageDownCommand" Opacity="0" Focusable="false" />
                         </Track.IncreaseRepeatButton>
                         <Track.DecreaseRepeatButton>
                             <RepeatButton x:Name="PageDown" Command="ScrollBar.PageUpCommand" Opacity="0" Focusable="false" />
                         </Track.DecreaseRepeatButton>
                     </Track>
                 </Grid>
                 <ControlTemplate.Triggers>
                     <Trigger SourceName="Thumb" Property="IsMouseOver" Value="true">
                         <Setter Value="{DynamicResource ButtonSelectBrush}" TargetName="Thumb" Property="Background" />
                     </Trigger>
                     <Trigger SourceName="Thumb" Property="IsDragging" Value="true">
                         <Setter Value="{DynamicResource DarkBrush}" TargetName="Thumb" Property="Background" />
                     </Trigger>
                     <Trigger Property="IsEnabled" Value="false">
                         <Setter TargetName="Thumb" Property="Visibility" Value="Collapsed" />
                     </Trigger>
                     <Trigger Property="Orientation" Value="Horizontal">
                         <Setter TargetName="GridRoot" Property="LayoutTransform">
                             <Setter.Value>
                                 <RotateTransform Angle="-90" />
                             </Setter.Value>
                         </Setter>
                         <Setter TargetName="PART_Track" Property="LayoutTransform">
                             <Setter.Value>
                                 <RotateTransform Angle="-90" />
                             </Setter.Value>
                         </Setter>
                         <Setter Property="Width" Value="Auto" />
                         <Setter Property="Height" Value="8" />
                         <Setter TargetName="Thumb" Property="Tag" Value="Horizontal" />
                         <Setter TargetName="PageDown" Property="Command" Value="ScrollBar.PageLeftCommand" />
                         <Setter TargetName="PageUp" Property="Command" Value="ScrollBar.PageRightCommand" />
                     </Trigger>
                 </ControlTemplate.Triggers>
             </ControlTemplate>
         </Setter.Value>
     </Setter>
 </Style>
 <!--End Scrollbar Thumbs-->

            <!--Button Style-->
                <Style TargetType="Button">
                    <Setter Property="Background" Value="{DynamicResource primary}"/>
                    <Setter Property="Foreground" Value="{DynamicResource PlaceHolder}"/>

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border CornerRadius="15" Background="{TemplateBinding Background}">
                                    <ContentPresenter HorizontalAlignment="Center"
                                                        VerticalAlignment="Center"/>
                                    
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource button}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            <!--End Button Style-->

            <!--Light Theme-->
        <SolidColorBrush Color="#121212" x:Key="primary"/>
        <SolidColorBrush Color="#212121" x:Key="secondary"/>
        <SolidColorBrush Color="#b3b3b3" x:Key="PlaceHolder"/>
        <SolidColorBrush Color="#1DB954" x:Key="button"/>
        <SolidColorBrush Color="White" x:Key="BtnForeground"/>
        <SolidColorBrush Color="White" x:Key="label"/>
        <SolidColorBrush Color="#b3b3b3" x:Key="link"/>
        <SolidColorBrush Color="#212121" x:Key="BorderBrush"/>
        

        </Window.Resources>

    <Grid>
     
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="222"/>
        </Grid.ColumnDefinitions>

        <!--Header Section-->

            <!--Logo-->
                <StackPanel Margin="20" Orientation="Horizontal"  VerticalAlignment="Center" Grid.Row="0" Grid.ColumnSpan="2" >

                    <Ellipse Name="about" Width="100" Height="100" Cursor="Hand">
                        <Ellipse.Fill>
                            <ImageBrush ImageSource="https://avatars.githubusercontent.com/u/19177373?v=4.png" />
                        </Ellipse.Fill>
                    </Ellipse>
            <!--End Logo-->

            <!--Catagory Section-->
                    <StackPanel Name="catg" Margin="20,0,0,0" Orientation="Horizontal" HorizontalAlignment="Left">

                    <Button Name="all"
                    Cursor="Hand"  
                    Content="All" 
                    Height="20" Width="60" 
                    Margin="4"  
                    Background="{DynamicResource primary}" 
                    Foreground="{DynamicResource PlaceHolder}"
                    
                    />

                    <Button Name="r" 
                    Cursor="Hand" 
                    Content="Fresh Start" 
                    Height="20" 
                    Width="100" Margin="4"  
                    Background="{DynamicResource primary}" 
                    Foreground="{DynamicResource PlaceHolder}"

                    />

                    <Button Name="m" 
                    Cursor="Hand"  
                    Content="Media" 
                    Height="20" 
                    Width="60" 
                    Margin="4"  
                    Background="{DynamicResource primary}" 
                    Foreground="{DynamicResource PlaceHolder}"
                    
                    />

                    <Button Name="b" 
                    Cursor="Hand"  
                    Content="Browsers" 
                    Height="20" Width="60" 
                    Margin="4"  
                    Background="{DynamicResource primary}" 
                    Foreground="{DynamicResource PlaceHolder}"
                    
                    />

                    <Button Name="g" 
                    Cursor="Hand"  
                    Content="Gaming" 
                    Height="20" 
                    Width="60" 
                    Margin="4"  
                    Background="{DynamicResource primary}" 
                    Foreground="{DynamicResource PlaceHolder}"
                    
                    />

                    <Button Name="d" 
                    Cursor="Hand"  
                    Content="Developer" 
                    Height="20" 
                    Width="70" 
                    Margin="4"  
                    Background="{DynamicResource primary}" 
                    Foreground="{DynamicResource PlaceHolder}"

                    />

                    <Button Name="u" 
                    Cursor="Hand"  
                    Content="Utilities" 
                    Height="20" 
                    Width="60" 
                    Margin="4"  
                    Background="{DynamicResource primary}" 
                    Foreground="{DynamicResource PlaceHolder}"
                    
                    />
                    <Button Name="c" 
                    Cursor="Hand" 
                    Content="Communication" 
                    Height="20" 
                    Width="100" 
                    Margin="4"  
                    Background="{DynamicResource primary}" 
                    Foreground="{DynamicResource PlaceHolder}"
                    
                    />

                    </StackPanel>
                </StackPanel>
            <!--End Catagory Section-->

        <!--End Header Section-->

            <!--TabControl-->
        <TabControl x:Name="taps" TabStripPlacement="Left" Margin="0, 10, 0, 10" Grid.Row="1" BorderBrush="{DynamicResource BorderBrush}" Foreground="White" Background="Transparent">
                <TabControl.Resources>


                    <Style TargetType="TabItem">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="TabItem">
                                    <Border Name="Border" CornerRadius="15" BorderThickness="0,0,0,0" Padding="5" BorderBrush="Gainsboro"  Margin="10,5">
                                        <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"
                                        Margin="10,2"/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource button}" />
                                            <Setter Property="Foreground" Value="White" />

                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="False">
                                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource secondary}" />
                                            <Setter Property="Foreground" Value="{DynamicResource PlaceHolder}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TabControl.Resources>
                <TabItem Header="Apps" Name="apps" BorderBrush="{x:Null}" Padding="16">
                    <TabItem.Content>
                        <ListView Margin="10" ScrollViewer.VerticalScrollBarVisibility="Auto" x:Name="list" BorderBrush="{x:Null}" Background="{x:Null}">
                        </ListView>
                    </TabItem.Content>
                </TabItem>
                <TabItem Header="Tweaks" x:Name="tweeks" Padding="16" BorderBrush="{x:Null}" Background="{x:Null}">
                    <TabItem.Content>
                        <ListView Name="tweaks"  Margin="10" ScrollViewer.VerticalScrollBarVisibility="Auto" BorderBrush="{x:Null}" Background="{x:Null}">
                        </ListView>
                    </TabItem.Content>
                </TabItem>
            </TabControl>
        <!--End TabControl-->

        <!--Main Section-->
            <Grid  Grid.Row="1" Grid.Column="1"  Grid.RowSpan="2">

                <StackPanel Orientation="Vertical">


                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">

                        <Grid>
                            <TextBox Padding="5"
                            BorderBrush="{x:Null}"
                            Width="200" 
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" 
                            Foreground="{DynamicResource label}"
                            Text="{Binding Text_searchInput}"
                            x:Name="searchInput" SelectionBrush="{x:Null}" 
                            Background="{DynamicResource secondary}"/>

                            <TextBlock IsHitTestVisible="False" 
                            Text="Search"
                            VerticalAlignment="Center" 
                            HorizontalAlignment="Left"
                            Margin="16,0,0,0"
                            Foreground="{DynamicResource PlaceHolder}">

                            <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Text, ElementName=searchInput}" Value="">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </StackPanel>

                    <TextBlock Name="itemLink" 
                        Foreground="{DynamicResource link}" 
                        Visibility="Hidden" 
                        TextWrapping="Wrap" 
                        Text="" 
                        Margin="20,15,15,0" 
                        Cursor="Hand"
                    />

                    <ScrollViewer VerticalScrollBarVisibility="Auto"
                        Height="233"
                        Margin="20,15,15,0" 
                    >
                        <TextBlock Name="description" 
                            Text=""
                            TextWrapping="Wrap" 
                            Foreground="{DynamicResource label}"/>
                    </ScrollViewer>

                    

                </StackPanel>

                <!--Install Button-->
                    <Button
                    Name="installBtn"
                    Content="Install"
                    FontSize="17"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Bottom"
                    Cursor="Hand"
                    Width="90" Height="33" Margin="50"/>
                <!--End Install Button-->

                <!--Apply Button-->
                    <Button
                    Name="applyBtn"
                    Content="Apply"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Bottom"
                    Cursor="Hand"
                    FontSize="17"
                    Visibility="Hidden"
                    Width="90" Height="33" Margin="50"/>
                <!--End Apply Button-->

            </Grid>
        <!--End Main Section-->

        <!--Footer Section-->
            <Grid Grid.Row="2">
                <TextBlock Name="quotes"
                HorizontalAlignment="Left"
                VerticalAlignment="Center" 
                Padding="16" TextWrapping="Wrap" 
                Text="When I finished building my boat, the sea dried up."
                Foreground="{DynamicResource label}"
                />
            </Grid>
        <!--End Footer Section-->

    </Grid>
        
    </Window>
<!--End Window-->

'
#===========================================================================
# Load XMAL 
#===========================================================================

#region Load XMAL
# Set the maximum number of threads for the RunspacePool to the number of threads on the machine
$maxthreads = [int]$env:NUMBER_OF_PROCESSORS

# Create a new session state for parsing variables into our runspace
$hashVars = New-object System.Management.Automation.Runspaces.SessionStateVariableEntry -ArgumentList 'sync',$sync,$Null
$InitialSessionState = [System.Management.Automation.Runspaces.InitialSessionState]::CreateDefault()

# Add the variable to the session state
$InitialSessionState.Variables.Add($hashVars)

# Create the runspace pool
$sync.runspace = [runspacefactory]::CreateRunspacePool(
    1,                      # Minimum thread count
    $maxthreads,            # Maximum thread count
    $InitialSessionState,   # Initial session state
    $Host                   # Machine to create runspaces on
)

# Open the RunspacePool instance
$sync.runspace.Open()

[xml]$XAML = $inputXML

$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$window = [Windows.Markup.XamlReader]::Load($reader)

# Read the XAML file
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
try
{ 
    $window = [Windows.Markup.XamlReader]::Load($reader)
}
catch [System.Management.Automation.MethodInvocationException] {
   
    Write-Host "error"
}
#endregion
#===========================================================================
# End Load XMAL 
#===========================================================================

#===========================================================================
# Loops 
#===========================================================================

#region Generate items from json file
$list = $Window.FindName("list")
$Window.FindName("apps").add_Loaded({


    foreach ($item in $sync.configs.applications)
    {
        $checkbox = New-Object System.Windows.Controls.CheckBox
        $list.Items.Add($checkbox)
        $checkbox.Content = $item.name
        $checkbox.Foreground = "White"


    }



     # Get Discription of selected item in $list
     $list.Add_SelectionChanged({
            
        $Window.FindName('itemLink').Visibility = "Visible"

        foreach($data in $sync.configs.applications)
        {

            if($list.SelectedItem.Content -eq $data.name)
            {
                $Window.FindName('itemLink').Text  = "What is " + $data.name + " ?"
                # $Window.FindName("description").Text = $data.description
            }
        }
    })

    # Get Selected item Website link from json file
    $Window.FindName('itemLink').add_MouseLeftButtonDown({

        foreach ($item in $list.SelectedItem.Content)
        {
            foreach ($data in $sync.configs.applications)
            {
                if($item -eq $data.name)
                {
                    Start-Process ("https://duckduckgo.com/?hps=1&q=%5C" + $data.name)
                }
            }
        }

    })



})
#endregion
#region Generate tweaks from json file
$sync.tweaks = $Window.FindName("tweaks")
$Window.FindName("tweeks").add_Loaded({


    foreach ($item in $sync.configs.tweaks)
    {
        $checkbox = New-Object System.Windows.Controls.CheckBox
        $sync.tweaks.Items.Add($checkbox)
        $checkbox.Content = $item.name
        $checkbox.Foreground = "White"
    }

    # Get Discription of selected tweaks in $list
    $sync.tweaks.Add_SelectionChanged({
            
        foreach($data in $sync.configs.tweaks)
        {
            if($sync.tweaks.SelectedItem.Content -eq $data.name)
            {
                $Window.FindName('description').Text =  $data.description
            }
        }
    })



})

#endregion
#===========================================================================
# End Loops 
#===========================================================================

CheckChoco

#===========================================================================
# Events 
#===========================================================================

# Buttons
$window.FindName('taps').add_SelectionChanged({ChangeTap})
$window.FindName('installBtn').add_click({Invoke-Install})
$window.FindName('applyBtn').add_click({ApplyTweaks})
$window.FindName('searchInput').add_TextChanged({Search})
$window.FindName('about').add_MouseLeftButtonDown({About})

# Catgoray bar buttons
$window.FindName('b').add_click({Catgoray($window.FindName('b').Content)})
$window.FindName('m').add_click({Catgoray($window.FindName('m').Content)})
$window.FindName('d').add_click({Catgoray($window.FindName('d').Content)})
$window.FindName('g').add_click({Catgoray($window.FindName('g').Content)})
$window.FindName('u').add_click({Catgoray($window.FindName('u').Content)})
$window.FindName('c').add_click({Catgoray($window.FindName('c').Content)})
$window.FindName('r').add_click({Recommended($window.FindName('r').Content)})
$window.FindName('all').add_click({ShowAll})

#===========================================================================
# End Events 
#===========================================================================

$window.ShowDialog() | out-null
