# Set the output field separator for joining lines
$OFS = "`r`n"

# Define the script name
$scriptname = "itt.ps1"

# Define function to remove existing script if present
function Remove-ExistingScript {
    param (
        [string]$scriptPath
    )

    if (Test-Path -Path $scriptPath) {
        Remove-Item -Path $scriptPath -Force
    }
}

# Remove existing script
Remove-ExistingScript -scriptPath $scriptname

# Create synchronized hashtable to share data between runspaces
$sync = [Hashtable]::Synchronized(@{})
$sync.PSScriptRoot = $PSScriptRoot
$sync.configs = @{}

# Append header to the script
$header = @"
################################################################################################################
###                                                                                                          ###
###                            This file is automatically generated                                          ###
###         ___ _____ _____     ____  _____ __  __    _    ____       _    ____  _____ _                     ###
###        |_ _|_   _|_   _|   / __ \| ____|  \/  |  / \  |  _ \     / \  |  _ \| ____| |                    ###
###         | |  | |   | |    / / _` |  _| | |\/| | / _ \ | | | |   / _ \ | | | |  _| | |                    ###
###         | |  | |   | |   | | (_| | |___| |  | |/ ___ \| |_| |  / ___ \| |_| | |___| |___                 ###
###         |_|  |_|   |_|    \ \__,_|_____|_|  |_/_/   \_\____/  /_/   \_\____/|_____|_____|                ###
###                           \____/                                                                         ###
###                                                                                                          ###
###                                    This is Emad adel an Binary                                           ###
###                01000101 01001101 01000001 01000100  01000001 01000100 01000101 01001100                  ###
###                                                                                                          ###
################################################################################################################
"@
$header | Out-File -FilePath $scriptname -Append -Encoding ascii

# Append start script content to the script
$startScript = (Get-Content .\scripts\start.ps1) -replace '#\{replaceme\}', "$(Get-Date -Format yy.MM.dd)"
$startScript | Out-File -FilePath $scriptname -Append -Encoding ascii

# Append function scripts to the script
Get-ChildItem .\Functions -Recurse -File | ForEach-Object {
    Get-Content $PSItem.FullName | Out-File -FilePath $scriptname -Append -Encoding ascii
}

# Process JSON configuration files and append them to the script
Get-ChildItem .\Database | Where-Object { $_.Extension -eq ".json" } | ForEach-Object {
    $json = (Get-Content $PSItem.FullName) -replace "'", "''"
    $configName = $PSItem.BaseName
    $sync.configs.$configName = $json | ConvertFrom-Json
    "`$sync.configs.$configName = '$json' | ConvertFrom-Json" | Out-File -FilePath $scriptname -Append -Encoding ascii
}

# Load and process XAML content
$xaml = (Get-Content .\Interface\window.xaml) -replace "'", "''"

# Load XAML content from other files
$appXamlContent = Get-Content -Path (Join-Path -Path $PSScriptRoot -ChildPath "interface/Controls/taps.xaml") -Raw
$buttonStyleContent = Get-Content -Path (Join-Path -Path $PSScriptRoot -ChildPath "interface/Themes/button.xaml") -Raw
$scrollbarContent = Get-Content -Path (Join-Path -Path $PSScriptRoot -ChildPath "interface/Themes/scrollbar.xaml") -Raw
$colorsContent = Get-Content -Path (Join-Path -Path $PSScriptRoot -ChildPath "interface/Themes/colors.xaml") -Raw

# Replace placeholders in XAML content
$xaml = $xaml -replace "{{Taps}}", $appXamlContent `
             -replace "{{ButtonStyle}}", $buttonStyleContent `
             -replace "{{ScrollbarStyle}}", $scrollbarContent `
             -replace "{{Colors}}", $colorsContent

# Append XAML content to the script
"`$inputXML = '$xaml'" | Out-File -FilePath $scriptname -Append -Encoding ascii 

# Append load XAML script content to the script
Get-Content .\Scripts\loadXmal.ps1 | Out-File -FilePath $scriptname -Append -Encoding ascii

# Append loop scripts to the script
Get-ChildItem .\Loops -Recurse -File | ForEach-Object {
    Get-Content $PSItem.FullName | Out-File -FilePath $scriptname -Append -Encoding ascii
}

# Append main script content to the script
Get-Content .\scripts\main.ps1 | Out-File -FilePath $scriptname -Append -Encoding ascii

# Execute the generated script
./itt.ps1
